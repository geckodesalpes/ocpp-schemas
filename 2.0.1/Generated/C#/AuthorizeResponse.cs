// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.AuthorizeResponse;
//
//    var authorizeResponse = AuthorizeResponse.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.AuthorizeResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AuthorizeResponse
    {
        [JsonProperty("certificateStatus", NullValueHandling = NullValueHandling.Ignore)]
        public virtual AuthorizeCertificateStatusEnumType? CertificateStatus { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("idTokenInfo")]
        public virtual IdTokenInfoType IdTokenInfo { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// ID_ Token
    /// urn:x-oca:ocpp:uid:2:233247
    /// Contains status information about an identifier.
    /// It is advised to not stop charging for a token that expires during charging, as
    /// ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has
    /// no end date.
    /// </summary>
    public partial class IdTokenInfoType
    {
        /// <summary>
        /// ID_ Token. Expiry. Date_ Time
        /// urn:x-oca:ocpp:uid:1:569373
        /// Date and Time after which the token must be considered invalid.
        /// </summary>
        [JsonProperty("cacheExpiryDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? CacheExpiryDateTime { get; set; }

        /// <summary>
        /// Priority from a business point of view. Default priority is 0, The range is from -9 to 9.
        /// Higher values indicate a higher priority. The chargingPriority in
        /// &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; overrules this one.
        /// </summary>
        [JsonProperty("chargingPriority", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ChargingPriority { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Only used when the IdToken is only valid for one or more specific EVSEs, not for the
        /// entire Charging Station.
        /// </summary>
        [JsonProperty("evseId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<long> EvseId { get; set; }

        [JsonProperty("groupIdToken", NullValueHandling = NullValueHandling.Ignore)]
        public virtual IdTokenType GroupIdToken { get; set; }

        /// <summary>
        /// ID_ Token. Language1. Language_ Code
        /// urn:x-oca:ocpp:uid:1:569374
        /// Preferred user interface language of identifier user. Contains a language code as defined
        /// in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.
        /// </summary>
        [JsonProperty("language1", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Language1 { get; set; }

        /// <summary>
        /// ID_ Token. Language2. Language_ Code
        /// urn:x-oca:ocpp:uid:1:569375
        /// Second preferred user interface language of identifier user. Donâ€™t use when language1 is
        /// omitted, has to be different from language1. Contains a language code as defined in
        /// &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.
        /// </summary>
        [JsonProperty("language2", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Language2 { get; set; }

        [JsonProperty("personalMessage", NullValueHandling = NullValueHandling.Ignore)]
        public virtual MessageContentType PersonalMessage { get; set; }

        [JsonProperty("status")]
        public virtual AuthorizationStatusEnumType Status { get; set; }
    }

    /// <summary>
    /// Contains a case insensitive identifier to use for the authorization and the type of
    /// authorization to support multiple forms of identifiers.
    /// </summary>
    public partial class IdTokenType
    {
        [JsonProperty("additionalInfo", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<AdditionalInfoType> AdditionalInfo { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can for example
        /// also contain a UUID.
        /// </summary>
        [JsonProperty("idToken")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string IdToken { get; set; }

        [JsonProperty("type")]
        public virtual IdTokenEnumType Type { get; set; }
    }

    /// <summary>
    /// Contains a case insensitive identifier to use for the authorization and the type of
    /// authorization to support multiple forms of identifiers.
    /// </summary>
    public partial class AdditionalInfoType
    {
        /// <summary>
        /// This field specifies the additional IdToken.
        /// </summary>
        [JsonProperty("additionalIdToken")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string AdditionalIdToken { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// This defines the type of the additionalIdToken. This is a custom type, so the
        /// implementation needs to be agreed upon by all involved parties.
        /// </summary>
        [JsonProperty("type")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Type { get; set; }
    }

    /// <summary>
    /// Message_ Content
    /// urn:x-enexis:ecdm:uid:2:234490
    /// Contains message details, for a message to be displayed on a Charging Station.
    /// </summary>
    public partial class MessageContentType
    {
        /// <summary>
        /// Message_ Content. Content. Message
        /// urn:x-enexis:ecdm:uid:1:570852
        /// Message contents.
        /// </summary>
        [JsonProperty("content")]
        [JsonConverter(typeof(IndigoMinMaxLengthCheckConverter))]
        public virtual string Content { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("format")]
        public virtual MessageFormatEnumType Format { get; set; }

        /// <summary>
        /// Message_ Content. Language. Language_ Code
        /// urn:x-enexis:ecdm:uid:1:570849
        /// Message language identifier. Contains a language code as defined in
        /// &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.
        /// </summary>
        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Language { get; set; }
    }

    /// <summary>
    /// Certificate status information.
    /// - if all certificates are valid: return 'Accepted'.
    /// - if one of the certificates was revoked, return 'CertificateRevoked'.
    /// </summary>
    public enum AuthorizeCertificateStatusEnumType { Accepted, CertChainError, CertificateExpired, CertificateRevoked, ContractCancelled, NoCertificateAvailable, SignatureError };

    /// <summary>
    /// Enumeration of possible idToken types.
    /// </summary>
    public enum IdTokenEnumType { Central, EMaid, Iso14443, Iso15693, KeyCode, Local, MacAddress, NoAuthorization };

    /// <summary>
    /// Message_ Content. Format. Message_ Format_ Code
    /// urn:x-enexis:ecdm:uid:1:570848
    /// Format of the message.
    /// </summary>
    public enum MessageFormatEnumType { Ascii, Html, Uri, Utf8 };

    /// <summary>
    /// ID_ Token. Status. Authorization_ Status
    /// urn:x-oca:ocpp:uid:1:569372
    /// Current status of the ID Token.
    /// </summary>
    public enum AuthorizationStatusEnumType { Accepted, Blocked, ConcurrentTx, Expired, Invalid, NoCredit, NotAllowedTypeEvse, NotAtThisLocation, NotAtThisTime, Unknown };

    public partial class AuthorizeResponse
    {
        public static AuthorizeResponse FromJson(string json) => JsonConvert.DeserializeObject<AuthorizeResponse>(json, Ocpp._201.Generated.Models.AuthorizeResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AuthorizeResponse self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.AuthorizeResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AuthorizeCertificateStatusEnumTypeConverter.Singleton,
                IdTokenEnumTypeConverter.Singleton,
                MessageFormatEnumTypeConverter.Singleton,
                AuthorizationStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AuthorizeCertificateStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AuthorizeCertificateStatusEnumType) || t == typeof(AuthorizeCertificateStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Accepted":
                    return AuthorizeCertificateStatusEnumType.Accepted;
                case "CertChainError":
                    return AuthorizeCertificateStatusEnumType.CertChainError;
                case "CertificateExpired":
                    return AuthorizeCertificateStatusEnumType.CertificateExpired;
                case "CertificateRevoked":
                    return AuthorizeCertificateStatusEnumType.CertificateRevoked;
                case "ContractCancelled":
                    return AuthorizeCertificateStatusEnumType.ContractCancelled;
                case "NoCertificateAvailable":
                    return AuthorizeCertificateStatusEnumType.NoCertificateAvailable;
                case "SignatureError":
                    return AuthorizeCertificateStatusEnumType.SignatureError;
            }
            throw new Exception("Cannot unmarshal type AuthorizeCertificateStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AuthorizeCertificateStatusEnumType)untypedValue;
            switch (value)
            {
                case AuthorizeCertificateStatusEnumType.Accepted:
                    serializer.Serialize(writer, "Accepted");
                    return;
                case AuthorizeCertificateStatusEnumType.CertChainError:
                    serializer.Serialize(writer, "CertChainError");
                    return;
                case AuthorizeCertificateStatusEnumType.CertificateExpired:
                    serializer.Serialize(writer, "CertificateExpired");
                    return;
                case AuthorizeCertificateStatusEnumType.CertificateRevoked:
                    serializer.Serialize(writer, "CertificateRevoked");
                    return;
                case AuthorizeCertificateStatusEnumType.ContractCancelled:
                    serializer.Serialize(writer, "ContractCancelled");
                    return;
                case AuthorizeCertificateStatusEnumType.NoCertificateAvailable:
                    serializer.Serialize(writer, "NoCertificateAvailable");
                    return;
                case AuthorizeCertificateStatusEnumType.SignatureError:
                    serializer.Serialize(writer, "SignatureError");
                    return;
            }
            throw new Exception("Cannot marshal type AuthorizeCertificateStatusEnumType");
        }

        public static readonly AuthorizeCertificateStatusEnumTypeConverter Singleton = new AuthorizeCertificateStatusEnumTypeConverter();
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 36)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 36)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }

    internal class IdTokenEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IdTokenEnumType) || t == typeof(IdTokenEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Central":
                    return IdTokenEnumType.Central;
                case "ISO14443":
                    return IdTokenEnumType.Iso14443;
                case "ISO15693":
                    return IdTokenEnumType.Iso15693;
                case "KeyCode":
                    return IdTokenEnumType.KeyCode;
                case "Local":
                    return IdTokenEnumType.Local;
                case "MacAddress":
                    return IdTokenEnumType.MacAddress;
                case "NoAuthorization":
                    return IdTokenEnumType.NoAuthorization;
                case "eMAID":
                    return IdTokenEnumType.EMaid;
            }
            throw new Exception("Cannot unmarshal type IdTokenEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IdTokenEnumType)untypedValue;
            switch (value)
            {
                case IdTokenEnumType.Central:
                    serializer.Serialize(writer, "Central");
                    return;
                case IdTokenEnumType.Iso14443:
                    serializer.Serialize(writer, "ISO14443");
                    return;
                case IdTokenEnumType.Iso15693:
                    serializer.Serialize(writer, "ISO15693");
                    return;
                case IdTokenEnumType.KeyCode:
                    serializer.Serialize(writer, "KeyCode");
                    return;
                case IdTokenEnumType.Local:
                    serializer.Serialize(writer, "Local");
                    return;
                case IdTokenEnumType.MacAddress:
                    serializer.Serialize(writer, "MacAddress");
                    return;
                case IdTokenEnumType.NoAuthorization:
                    serializer.Serialize(writer, "NoAuthorization");
                    return;
                case IdTokenEnumType.EMaid:
                    serializer.Serialize(writer, "eMAID");
                    return;
            }
            throw new Exception("Cannot marshal type IdTokenEnumType");
        }

        public static readonly IdTokenEnumTypeConverter Singleton = new IdTokenEnumTypeConverter();
    }

    internal class StickyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 8)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 8)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly StickyMinMaxLengthCheckConverter Singleton = new StickyMinMaxLengthCheckConverter();
    }

    internal class IndigoMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly IndigoMinMaxLengthCheckConverter Singleton = new IndigoMinMaxLengthCheckConverter();
    }

    internal class MessageFormatEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessageFormatEnumType) || t == typeof(MessageFormatEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ASCII":
                    return MessageFormatEnumType.Ascii;
                case "HTML":
                    return MessageFormatEnumType.Html;
                case "URI":
                    return MessageFormatEnumType.Uri;
                case "UTF8":
                    return MessageFormatEnumType.Utf8;
            }
            throw new Exception("Cannot unmarshal type MessageFormatEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessageFormatEnumType)untypedValue;
            switch (value)
            {
                case MessageFormatEnumType.Ascii:
                    serializer.Serialize(writer, "ASCII");
                    return;
                case MessageFormatEnumType.Html:
                    serializer.Serialize(writer, "HTML");
                    return;
                case MessageFormatEnumType.Uri:
                    serializer.Serialize(writer, "URI");
                    return;
                case MessageFormatEnumType.Utf8:
                    serializer.Serialize(writer, "UTF8");
                    return;
            }
            throw new Exception("Cannot marshal type MessageFormatEnumType");
        }

        public static readonly MessageFormatEnumTypeConverter Singleton = new MessageFormatEnumTypeConverter();
    }

    internal class AuthorizationStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AuthorizationStatusEnumType) || t == typeof(AuthorizationStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Accepted":
                    return AuthorizationStatusEnumType.Accepted;
                case "Blocked":
                    return AuthorizationStatusEnumType.Blocked;
                case "ConcurrentTx":
                    return AuthorizationStatusEnumType.ConcurrentTx;
                case "Expired":
                    return AuthorizationStatusEnumType.Expired;
                case "Invalid":
                    return AuthorizationStatusEnumType.Invalid;
                case "NoCredit":
                    return AuthorizationStatusEnumType.NoCredit;
                case "NotAllowedTypeEVSE":
                    return AuthorizationStatusEnumType.NotAllowedTypeEvse;
                case "NotAtThisLocation":
                    return AuthorizationStatusEnumType.NotAtThisLocation;
                case "NotAtThisTime":
                    return AuthorizationStatusEnumType.NotAtThisTime;
                case "Unknown":
                    return AuthorizationStatusEnumType.Unknown;
            }
            throw new Exception("Cannot unmarshal type AuthorizationStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AuthorizationStatusEnumType)untypedValue;
            switch (value)
            {
                case AuthorizationStatusEnumType.Accepted:
                    serializer.Serialize(writer, "Accepted");
                    return;
                case AuthorizationStatusEnumType.Blocked:
                    serializer.Serialize(writer, "Blocked");
                    return;
                case AuthorizationStatusEnumType.ConcurrentTx:
                    serializer.Serialize(writer, "ConcurrentTx");
                    return;
                case AuthorizationStatusEnumType.Expired:
                    serializer.Serialize(writer, "Expired");
                    return;
                case AuthorizationStatusEnumType.Invalid:
                    serializer.Serialize(writer, "Invalid");
                    return;
                case AuthorizationStatusEnumType.NoCredit:
                    serializer.Serialize(writer, "NoCredit");
                    return;
                case AuthorizationStatusEnumType.NotAllowedTypeEvse:
                    serializer.Serialize(writer, "NotAllowedTypeEVSE");
                    return;
                case AuthorizationStatusEnumType.NotAtThisLocation:
                    serializer.Serialize(writer, "NotAtThisLocation");
                    return;
                case AuthorizationStatusEnumType.NotAtThisTime:
                    serializer.Serialize(writer, "NotAtThisTime");
                    return;
                case AuthorizationStatusEnumType.Unknown:
                    serializer.Serialize(writer, "Unknown");
                    return;
            }
            throw new Exception("Cannot marshal type AuthorizationStatusEnumType");
        }

        public static readonly AuthorizationStatusEnumTypeConverter Singleton = new AuthorizationStatusEnumTypeConverter();
    }
}
