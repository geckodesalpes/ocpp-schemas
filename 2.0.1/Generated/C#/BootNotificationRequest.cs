// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.BootNotificationRequest;
//
//    var bootNotificationRequest = BootNotificationRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.BootNotificationRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BootNotificationRequest
    {
        [JsonProperty("chargingStation")]
        public virtual ChargingStationType ChargingStation { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("reason")]
        public virtual BootReasonEnumType Reason { get; set; }
    }

    /// <summary>
    /// Charge_ Point
    /// urn:x-oca:ocpp:uid:2:233122
    /// The physical system where an Electrical Vehicle (EV) can be charged.
    /// </summary>
    public partial class ChargingStationType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// This contains the firmware version of the Charging Station.
        /// </summary>
        [JsonProperty("firmwareVersion", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string FirmwareVersion { get; set; }

        /// <summary>
        /// Device. Model. CI20_ Text
        /// urn:x-oca:ocpp:uid:1:569325
        /// Defines the model of the device.
        /// </summary>
        [JsonProperty("model")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Model { get; set; }

        [JsonProperty("modem", NullValueHandling = NullValueHandling.Ignore)]
        public virtual ModemType Modem { get; set; }

        /// <summary>
        /// Device. Serial_ Number. Serial_ Number
        /// urn:x-oca:ocpp:uid:1:569324
        /// Vendor-specific device identifier.
        /// </summary>
        [JsonProperty("serialNumber", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string SerialNumber { get; set; }

        /// <summary>
        /// Identifies the vendor (not necessarily in a unique manner).
        /// </summary>
        [JsonProperty("vendorName")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string VendorName { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Wireless_ Communication_ Module
    /// urn:x-oca:ocpp:uid:2:233306
    /// Defines parameters required for initiating and maintaining wireless communication with
    /// other devices.
    /// </summary>
    public partial class ModemType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Wireless_ Communication_ Module. ICCID. CI20_ Text
        /// urn:x-oca:ocpp:uid:1:569327
        /// This contains the ICCID of the modem’s SIM card.
        /// </summary>
        [JsonProperty("iccid", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Iccid { get; set; }

        /// <summary>
        /// Wireless_ Communication_ Module. IMSI. CI20_ Text
        /// urn:x-oca:ocpp:uid:1:569328
        /// This contains the IMSI of the modem’s SIM card.
        /// </summary>
        [JsonProperty("imsi", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Imsi { get; set; }
    }

    /// <summary>
    /// This contains the reason for sending this message to the CSMS.
    /// </summary>
    public enum BootReasonEnumType { ApplicationReset, FirmwareUpdate, LocalReset, PowerUp, RemoteReset, ScheduledReset, Triggered, Unknown, Watchdog };

    public partial class BootNotificationRequest
    {
        public static BootNotificationRequest FromJson(string json) => JsonConvert.DeserializeObject<BootNotificationRequest>(json, Ocpp._201.Generated.Models.BootNotificationRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BootNotificationRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.BootNotificationRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                BootReasonEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 20)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 20)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }

    internal class StickyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 25)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 25)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly StickyMinMaxLengthCheckConverter Singleton = new StickyMinMaxLengthCheckConverter();
    }

    internal class BootReasonEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BootReasonEnumType) || t == typeof(BootReasonEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ApplicationReset":
                    return BootReasonEnumType.ApplicationReset;
                case "FirmwareUpdate":
                    return BootReasonEnumType.FirmwareUpdate;
                case "LocalReset":
                    return BootReasonEnumType.LocalReset;
                case "PowerUp":
                    return BootReasonEnumType.PowerUp;
                case "RemoteReset":
                    return BootReasonEnumType.RemoteReset;
                case "ScheduledReset":
                    return BootReasonEnumType.ScheduledReset;
                case "Triggered":
                    return BootReasonEnumType.Triggered;
                case "Unknown":
                    return BootReasonEnumType.Unknown;
                case "Watchdog":
                    return BootReasonEnumType.Watchdog;
            }
            throw new Exception("Cannot unmarshal type BootReasonEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BootReasonEnumType)untypedValue;
            switch (value)
            {
                case BootReasonEnumType.ApplicationReset:
                    serializer.Serialize(writer, "ApplicationReset");
                    return;
                case BootReasonEnumType.FirmwareUpdate:
                    serializer.Serialize(writer, "FirmwareUpdate");
                    return;
                case BootReasonEnumType.LocalReset:
                    serializer.Serialize(writer, "LocalReset");
                    return;
                case BootReasonEnumType.PowerUp:
                    serializer.Serialize(writer, "PowerUp");
                    return;
                case BootReasonEnumType.RemoteReset:
                    serializer.Serialize(writer, "RemoteReset");
                    return;
                case BootReasonEnumType.ScheduledReset:
                    serializer.Serialize(writer, "ScheduledReset");
                    return;
                case BootReasonEnumType.Triggered:
                    serializer.Serialize(writer, "Triggered");
                    return;
                case BootReasonEnumType.Unknown:
                    serializer.Serialize(writer, "Unknown");
                    return;
                case BootReasonEnumType.Watchdog:
                    serializer.Serialize(writer, "Watchdog");
                    return;
            }
            throw new Exception("Cannot marshal type BootReasonEnumType");
        }

        public static readonly BootReasonEnumTypeConverter Singleton = new BootReasonEnumTypeConverter();
    }
}
