// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.CertificateSignedRequest;
//
//    var certificateSignedRequest = CertificateSignedRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.CertificateSignedRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CertificateSignedRequest
    {
        /// <summary>
        /// The signed PEM encoded X.509 certificate. This can also contain the necessary sub CA
        /// certificates. In that case, the order of the bundle should follow the certificate chain,
        /// starting from the leaf certificate.
        ///
        /// The Configuration Variable
        /// &lt;&lt;configkey-max-certificate-chain-size,MaxCertificateChainSize&gt;&gt; can be used
        /// to limit the maximum size of this field.
        /// </summary>
        [JsonProperty("certificateChain")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string CertificateChain { get; set; }

        [JsonProperty("certificateType", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CertificateSigningUseEnumType? CertificateType { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Indicates the type of the signed certificate that is returned. When omitted the
    /// certificate is used for both the 15118 connection (if implemented) and the Charging
    /// Station to CSMS connection. This field is required when a typeOfCertificate was included
    /// in the &lt;&lt;signcertificaterequest,SignCertificateRequest&gt;&gt; that requested this
    /// certificate to be signed AND both the 15118 connection and the Charging Station
    /// connection are implemented.
    /// </summary>
    public enum CertificateSigningUseEnumType { ChargingStationCertificate, V2GCertificate };

    public partial class CertificateSignedRequest
    {
        public static CertificateSignedRequest FromJson(string json) => JsonConvert.DeserializeObject<CertificateSignedRequest>(json, Ocpp._201.Generated.Models.CertificateSignedRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CertificateSignedRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.CertificateSignedRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CertificateSigningUseEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 10000)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 10000)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class CertificateSigningUseEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CertificateSigningUseEnumType) || t == typeof(CertificateSigningUseEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ChargingStationCertificate":
                    return CertificateSigningUseEnumType.ChargingStationCertificate;
                case "V2GCertificate":
                    return CertificateSigningUseEnumType.V2GCertificate;
            }
            throw new Exception("Cannot unmarshal type CertificateSigningUseEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CertificateSigningUseEnumType)untypedValue;
            switch (value)
            {
                case CertificateSigningUseEnumType.ChargingStationCertificate:
                    serializer.Serialize(writer, "ChargingStationCertificate");
                    return;
                case CertificateSigningUseEnumType.V2GCertificate:
                    serializer.Serialize(writer, "V2GCertificate");
                    return;
            }
            throw new Exception("Cannot marshal type CertificateSigningUseEnumType");
        }

        public static readonly CertificateSigningUseEnumTypeConverter Singleton = new CertificateSigningUseEnumTypeConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }
}
