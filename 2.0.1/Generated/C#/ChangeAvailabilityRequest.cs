// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.ChangeAvailabilityRequest;
//
//    var changeAvailabilityRequest = ChangeAvailabilityRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.ChangeAvailabilityRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ChangeAvailabilityRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("evse", NullValueHandling = NullValueHandling.Ignore)]
        public virtual EvseType Evse { get; set; }

        [JsonProperty("operationalStatus")]
        public virtual OperationalStatusEnumType OperationalStatus { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// EVSE
    /// urn:x-oca:ocpp:uid:2:233123
    /// Electric Vehicle Supply Equipment
    /// </summary>
    public partial class EvseType
    {
        /// <summary>
        /// An id to designate a specific connector (on an EVSE) by connector index number.
        /// </summary>
        [JsonProperty("connectorId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ConnectorId { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging
        /// Station.
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }
    }

    /// <summary>
    /// This contains the type of availability change that the Charging Station should perform.
    /// </summary>
    public enum OperationalStatusEnumType { Inoperative, Operative };

    public partial class ChangeAvailabilityRequest
    {
        public static ChangeAvailabilityRequest FromJson(string json) => JsonConvert.DeserializeObject<ChangeAvailabilityRequest>(json, Ocpp._201.Generated.Models.ChangeAvailabilityRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ChangeAvailabilityRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.ChangeAvailabilityRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OperationalStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class OperationalStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OperationalStatusEnumType) || t == typeof(OperationalStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Inoperative":
                    return OperationalStatusEnumType.Inoperative;
                case "Operative":
                    return OperationalStatusEnumType.Operative;
            }
            throw new Exception("Cannot unmarshal type OperationalStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OperationalStatusEnumType)untypedValue;
            switch (value)
            {
                case OperationalStatusEnumType.Inoperative:
                    serializer.Serialize(writer, "Inoperative");
                    return;
                case OperationalStatusEnumType.Operative:
                    serializer.Serialize(writer, "Operative");
                    return;
            }
            throw new Exception("Cannot marshal type OperationalStatusEnumType");
        }

        public static readonly OperationalStatusEnumTypeConverter Singleton = new OperationalStatusEnumTypeConverter();
    }
}
