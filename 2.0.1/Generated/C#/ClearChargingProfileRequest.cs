// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.ClearChargingProfileRequest;
//
//    var clearChargingProfileRequest = ClearChargingProfileRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.ClearChargingProfileRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ClearChargingProfileRequest
    {
        [JsonProperty("chargingProfileCriteria", NullValueHandling = NullValueHandling.Ignore)]
        public virtual ClearChargingProfileType ChargingProfileCriteria { get; set; }

        /// <summary>
        /// The Id of the charging profile to clear.
        /// </summary>
        [JsonProperty("chargingProfileId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ChargingProfileId { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }
    }

    /// <summary>
    /// Charging_ Profile
    /// urn:x-oca:ocpp:uid:2:233255
    /// A ChargingProfile consists of a ChargingSchedule, describing the amount of power or
    /// current that can be delivered per time interval.
    /// </summary>
    public partial class ClearChargingProfileType
    {
        [JsonProperty("chargingProfilePurpose", NullValueHandling = NullValueHandling.Ignore)]
        public virtual ChargingProfilePurposeEnumType? ChargingProfilePurpose { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// Specifies the id of the EVSE for which to clear charging profiles. An evseId of zero (0)
        /// specifies the charging profile for the overall Charging Station. Absence of this
        /// parameter means the clearing applies to all charging profiles that match the other
        /// criteria in the request.
        /// </summary>
        [JsonProperty("evseId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? EvseId { get; set; }

        /// <summary>
        /// Charging_ Profile. Stack_ Level. Counter
        /// urn:x-oca:ocpp:uid:1:569230
        /// Specifies the stackLevel for which charging profiles will be cleared, if they meet the
        /// other criteria in the request.
        /// </summary>
        [JsonProperty("stackLevel", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? StackLevel { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Charging_ Profile. Charging_ Profile_ Purpose. Charging_ Profile_ Purpose_ Code
    /// urn:x-oca:ocpp:uid:1:569231
    /// Specifies to purpose of the charging profiles that will be cleared, if they meet the
    /// other criteria in the request.
    /// </summary>
    public enum ChargingProfilePurposeEnumType { ChargingStationExternalConstraints, ChargingStationMaxProfile, TxDefaultProfile, TxProfile };

    public partial class ClearChargingProfileRequest
    {
        public static ClearChargingProfileRequest FromJson(string json) => JsonConvert.DeserializeObject<ClearChargingProfileRequest>(json, Ocpp._201.Generated.Models.ClearChargingProfileRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ClearChargingProfileRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.ClearChargingProfileRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ChargingProfilePurposeEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ChargingProfilePurposeEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChargingProfilePurposeEnumType) || t == typeof(ChargingProfilePurposeEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ChargingStationExternalConstraints":
                    return ChargingProfilePurposeEnumType.ChargingStationExternalConstraints;
                case "ChargingStationMaxProfile":
                    return ChargingProfilePurposeEnumType.ChargingStationMaxProfile;
                case "TxDefaultProfile":
                    return ChargingProfilePurposeEnumType.TxDefaultProfile;
                case "TxProfile":
                    return ChargingProfilePurposeEnumType.TxProfile;
            }
            throw new Exception("Cannot unmarshal type ChargingProfilePurposeEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChargingProfilePurposeEnumType)untypedValue;
            switch (value)
            {
                case ChargingProfilePurposeEnumType.ChargingStationExternalConstraints:
                    serializer.Serialize(writer, "ChargingStationExternalConstraints");
                    return;
                case ChargingProfilePurposeEnumType.ChargingStationMaxProfile:
                    serializer.Serialize(writer, "ChargingStationMaxProfile");
                    return;
                case ChargingProfilePurposeEnumType.TxDefaultProfile:
                    serializer.Serialize(writer, "TxDefaultProfile");
                    return;
                case ChargingProfilePurposeEnumType.TxProfile:
                    serializer.Serialize(writer, "TxProfile");
                    return;
            }
            throw new Exception("Cannot marshal type ChargingProfilePurposeEnumType");
        }

        public static readonly ChargingProfilePurposeEnumTypeConverter Singleton = new ChargingProfilePurposeEnumTypeConverter();
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }
}
