// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.ClearedChargingLimitRequest;
//
//    var clearedChargingLimitRequest = ClearedChargingLimitRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.ClearedChargingLimitRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ClearedChargingLimitRequest
    {
        [JsonProperty("chargingLimitSource")]
        public virtual ChargingLimitSourceEnumType ChargingLimitSource { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// EVSE Identifier.
        /// </summary>
        [JsonProperty("evseId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? EvseId { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Source of the charging limit.
    /// </summary>
    public enum ChargingLimitSourceEnumType { Cso, Ems, Other, So };

    public partial class ClearedChargingLimitRequest
    {
        public static ClearedChargingLimitRequest FromJson(string json) => JsonConvert.DeserializeObject<ClearedChargingLimitRequest>(json, Ocpp._201.Generated.Models.ClearedChargingLimitRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ClearedChargingLimitRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.ClearedChargingLimitRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ChargingLimitSourceEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ChargingLimitSourceEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChargingLimitSourceEnumType) || t == typeof(ChargingLimitSourceEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CSO":
                    return ChargingLimitSourceEnumType.Cso;
                case "EMS":
                    return ChargingLimitSourceEnumType.Ems;
                case "Other":
                    return ChargingLimitSourceEnumType.Other;
                case "SO":
                    return ChargingLimitSourceEnumType.So;
            }
            throw new Exception("Cannot unmarshal type ChargingLimitSourceEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChargingLimitSourceEnumType)untypedValue;
            switch (value)
            {
                case ChargingLimitSourceEnumType.Cso:
                    serializer.Serialize(writer, "CSO");
                    return;
                case ChargingLimitSourceEnumType.Ems:
                    serializer.Serialize(writer, "EMS");
                    return;
                case ChargingLimitSourceEnumType.Other:
                    serializer.Serialize(writer, "Other");
                    return;
                case ChargingLimitSourceEnumType.So:
                    serializer.Serialize(writer, "SO");
                    return;
            }
            throw new Exception("Cannot marshal type ChargingLimitSourceEnumType");
        }

        public static readonly ChargingLimitSourceEnumTypeConverter Singleton = new ChargingLimitSourceEnumTypeConverter();
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }
}
