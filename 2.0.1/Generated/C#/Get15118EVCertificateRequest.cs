// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.Get15118EVCertificateRequest;
//
//    var get15118EvCertificateRequest = Get15118EvCertificateRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.Get15118EVCertificateRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Get15118EvCertificateRequest
    {
        [JsonProperty("action")]
        public virtual CertificateActionEnumType Action { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Raw CertificateInstallationReq request from EV, Base64 encoded.
        /// </summary>
        [JsonProperty("exiRequest")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string ExiRequest { get; set; }

        /// <summary>
        /// Schema version currently used for the 15118 session between EV and Charging Station.
        /// Needed for parsing of the EXI stream by the CSMS.
        /// </summary>
        [JsonProperty("iso15118SchemaVersion")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Iso15118SchemaVersion { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Defines whether certificate needs to be installed or updated.
    /// </summary>
    public enum CertificateActionEnumType { Install, Update };

    public partial class Get15118EvCertificateRequest
    {
        public static Get15118EvCertificateRequest FromJson(string json) => JsonConvert.DeserializeObject<Get15118EvCertificateRequest>(json, Ocpp._201.Generated.Models.Get15118EVCertificateRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Get15118EvCertificateRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.Get15118EVCertificateRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CertificateActionEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CertificateActionEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CertificateActionEnumType) || t == typeof(CertificateActionEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Install":
                    return CertificateActionEnumType.Install;
                case "Update":
                    return CertificateActionEnumType.Update;
            }
            throw new Exception("Cannot unmarshal type CertificateActionEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CertificateActionEnumType)untypedValue;
            switch (value)
            {
                case CertificateActionEnumType.Install:
                    serializer.Serialize(writer, "Install");
                    return;
                case CertificateActionEnumType.Update:
                    serializer.Serialize(writer, "Update");
                    return;
            }
            throw new Exception("Cannot marshal type CertificateActionEnumType");
        }

        public static readonly CertificateActionEnumTypeConverter Singleton = new CertificateActionEnumTypeConverter();
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 5600)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 5600)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }
}
