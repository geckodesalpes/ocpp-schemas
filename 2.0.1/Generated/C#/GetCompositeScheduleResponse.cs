// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.GetCompositeScheduleResponse;
//
//    var getCompositeScheduleResponse = GetCompositeScheduleResponse.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.GetCompositeScheduleResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetCompositeScheduleResponse
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("schedule", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CompositeScheduleType Schedule { get; set; }

        [JsonProperty("status")]
        public virtual GenericStatusEnumType Status { get; set; }

        [JsonProperty("statusInfo", NullValueHandling = NullValueHandling.Ignore)]
        public virtual StatusInfoType StatusInfo { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Composite_ Schedule
    /// urn:x-oca:ocpp:uid:2:233362
    /// </summary>
    public partial class CompositeScheduleType
    {
        [JsonProperty("chargingRateUnit")]
        public virtual ChargingRateUnitEnumType ChargingRateUnit { get; set; }

        [JsonProperty("chargingSchedulePeriod")]
        public virtual System.Collections.Generic.List<ChargingSchedulePeriodType> ChargingSchedulePeriod { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Duration of the schedule in seconds.
        /// </summary>
        [JsonProperty("duration")]
        public virtual long Duration { get; set; }

        /// <summary>
        /// The ID of the EVSE for which the
        /// schedule is requested. When evseid=0, the
        /// Charging Station calculated the expected
        /// consumption for the grid connection.
        /// </summary>
        [JsonProperty("evseId")]
        public virtual long EvseId { get; set; }

        /// <summary>
        /// Composite_ Schedule. Start. Date_ Time
        /// urn:x-oca:ocpp:uid:1:569456
        /// Date and time at which the schedule becomes active. All time measurements within the
        /// schedule are relative to this timestamp.
        /// </summary>
        [JsonProperty("scheduleStart")]
        public virtual DateTimeOffset ScheduleStart { get; set; }
    }

    /// <summary>
    /// Charging_ Schedule_ Period
    /// urn:x-oca:ocpp:uid:2:233257
    /// Charging schedule period structure defines a time period in a charging schedule.
    /// </summary>
    public partial class ChargingSchedulePeriodType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Charging_ Schedule_ Period. Limit. Measure
        /// urn:x-oca:ocpp:uid:1:569241
        /// Charging rate limit during the schedule period, in the applicable chargingRateUnit, for
        /// example in Amperes (A) or Watts (W). Accepts at most one digit fraction (e.g. 8.1).
        /// </summary>
        [JsonProperty("limit")]
        public virtual double Limit { get; set; }

        /// <summary>
        /// Charging_ Schedule_ Period. Number_ Phases. Counter
        /// urn:x-oca:ocpp:uid:1:569242
        /// The number of phases that can be used for charging. If a number of phases is needed,
        /// numberPhases=3 will be assumed unless another number is given.
        /// </summary>
        [JsonProperty("numberPhases", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? NumberPhases { get; set; }

        /// <summary>
        /// Values: 1..3, Used if numberPhases=1 and if the EVSE is capable of switching the phase
        /// connected to the EV, i.e. ACPhaseSwitchingSupported is defined and true. Itâ€™s not allowed
        /// unless both conditions above are true. If both conditions are true, and phaseToUse is
        /// omitted, the Charging Station / EVSE will make the selection on its own.
        /// </summary>
        [JsonProperty("phaseToUse", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? PhaseToUse { get; set; }

        /// <summary>
        /// Charging_ Schedule_ Period. Start_ Period. Elapsed_ Time
        /// urn:x-oca:ocpp:uid:1:569240
        /// Start of the period, in seconds from the start of schedule. The value of StartPeriod also
        /// defines the stop time of the previous period.
        /// </summary>
        [JsonProperty("startPeriod")]
        public virtual long StartPeriod { get; set; }
    }

    /// <summary>
    /// Element providing more information about the status.
    /// </summary>
    public partial class StatusInfoType
    {
        /// <summary>
        /// Additional text to provide detailed information.
        /// </summary>
        [JsonProperty("additionalInfo", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string AdditionalInfo { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// A predefined code for the reason why the status is returned in this response. The string
        /// is case-insensitive.
        /// </summary>
        [JsonProperty("reasonCode")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string ReasonCode { get; set; }
    }

    /// <summary>
    /// The unit of measure Limit is
    /// expressed in.
    /// </summary>
    public enum ChargingRateUnitEnumType { A, W };

    /// <summary>
    /// The Charging Station will indicate if it was
    /// able to process the request
    /// </summary>
    public enum GenericStatusEnumType { Accepted, Rejected };

    public partial class GetCompositeScheduleResponse
    {
        public static GetCompositeScheduleResponse FromJson(string json) => JsonConvert.DeserializeObject<GetCompositeScheduleResponse>(json, Ocpp._201.Generated.Models.GetCompositeScheduleResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetCompositeScheduleResponse self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.GetCompositeScheduleResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ChargingRateUnitEnumTypeConverter.Singleton,
                GenericStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class ChargingRateUnitEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChargingRateUnitEnumType) || t == typeof(ChargingRateUnitEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "A":
                    return ChargingRateUnitEnumType.A;
                case "W":
                    return ChargingRateUnitEnumType.W;
            }
            throw new Exception("Cannot unmarshal type ChargingRateUnitEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChargingRateUnitEnumType)untypedValue;
            switch (value)
            {
                case ChargingRateUnitEnumType.A:
                    serializer.Serialize(writer, "A");
                    return;
                case ChargingRateUnitEnumType.W:
                    serializer.Serialize(writer, "W");
                    return;
            }
            throw new Exception("Cannot marshal type ChargingRateUnitEnumType");
        }

        public static readonly ChargingRateUnitEnumTypeConverter Singleton = new ChargingRateUnitEnumTypeConverter();
    }

    internal class GenericStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GenericStatusEnumType) || t == typeof(GenericStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Accepted":
                    return GenericStatusEnumType.Accepted;
                case "Rejected":
                    return GenericStatusEnumType.Rejected;
            }
            throw new Exception("Cannot unmarshal type GenericStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GenericStatusEnumType)untypedValue;
            switch (value)
            {
                case GenericStatusEnumType.Accepted:
                    serializer.Serialize(writer, "Accepted");
                    return;
                case GenericStatusEnumType.Rejected:
                    serializer.Serialize(writer, "Rejected");
                    return;
            }
            throw new Exception("Cannot marshal type GenericStatusEnumType");
        }

        public static readonly GenericStatusEnumTypeConverter Singleton = new GenericStatusEnumTypeConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 20)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 20)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }
}
