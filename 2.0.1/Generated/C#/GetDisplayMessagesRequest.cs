// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.GetDisplayMessagesRequest;
//
//    var getDisplayMessagesRequest = GetDisplayMessagesRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.GetDisplayMessagesRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetDisplayMessagesRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// If provided the Charging Station shall return Display Messages of the given ids. This
        /// field SHALL NOT contain more ids than set in
        /// &lt;&lt;configkey-number-of-display-messages,NumberOfDisplayMessages.maxLimit&gt;&gt;
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<long> Id { get; set; }

        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public virtual MessagePriorityEnumType? Priority { get; set; }

        /// <summary>
        /// The Id of this request.
        /// </summary>
        [JsonProperty("requestId")]
        public virtual long RequestId { get; set; }

        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public virtual MessageStateEnumType? State { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// If provided the Charging Station shall return Display Messages with the given priority
    /// only.
    /// </summary>
    public enum MessagePriorityEnumType { AlwaysFront, InFront, NormalCycle };

    /// <summary>
    /// If provided the Charging Station shall return Display Messages with the given state only.
    /// </summary>
    public enum MessageStateEnumType { Charging, Faulted, Idle, Unavailable };

    public partial class GetDisplayMessagesRequest
    {
        public static GetDisplayMessagesRequest FromJson(string json) => JsonConvert.DeserializeObject<GetDisplayMessagesRequest>(json, Ocpp._201.Generated.Models.GetDisplayMessagesRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetDisplayMessagesRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.GetDisplayMessagesRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MessagePriorityEnumTypeConverter.Singleton,
                MessageStateEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class MessagePriorityEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessagePriorityEnumType) || t == typeof(MessagePriorityEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AlwaysFront":
                    return MessagePriorityEnumType.AlwaysFront;
                case "InFront":
                    return MessagePriorityEnumType.InFront;
                case "NormalCycle":
                    return MessagePriorityEnumType.NormalCycle;
            }
            throw new Exception("Cannot unmarshal type MessagePriorityEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessagePriorityEnumType)untypedValue;
            switch (value)
            {
                case MessagePriorityEnumType.AlwaysFront:
                    serializer.Serialize(writer, "AlwaysFront");
                    return;
                case MessagePriorityEnumType.InFront:
                    serializer.Serialize(writer, "InFront");
                    return;
                case MessagePriorityEnumType.NormalCycle:
                    serializer.Serialize(writer, "NormalCycle");
                    return;
            }
            throw new Exception("Cannot marshal type MessagePriorityEnumType");
        }

        public static readonly MessagePriorityEnumTypeConverter Singleton = new MessagePriorityEnumTypeConverter();
    }

    internal class MessageStateEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessageStateEnumType) || t == typeof(MessageStateEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Charging":
                    return MessageStateEnumType.Charging;
                case "Faulted":
                    return MessageStateEnumType.Faulted;
                case "Idle":
                    return MessageStateEnumType.Idle;
                case "Unavailable":
                    return MessageStateEnumType.Unavailable;
            }
            throw new Exception("Cannot unmarshal type MessageStateEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessageStateEnumType)untypedValue;
            switch (value)
            {
                case MessageStateEnumType.Charging:
                    serializer.Serialize(writer, "Charging");
                    return;
                case MessageStateEnumType.Faulted:
                    serializer.Serialize(writer, "Faulted");
                    return;
                case MessageStateEnumType.Idle:
                    serializer.Serialize(writer, "Idle");
                    return;
                case MessageStateEnumType.Unavailable:
                    serializer.Serialize(writer, "Unavailable");
                    return;
            }
            throw new Exception("Cannot marshal type MessageStateEnumType");
        }

        public static readonly MessageStateEnumTypeConverter Singleton = new MessageStateEnumTypeConverter();
    }
}
