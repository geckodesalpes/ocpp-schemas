// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.GetInstalledCertificateIdsResponse;
//
//    var getInstalledCertificateIdsResponse = GetInstalledCertificateIdsResponse.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.GetInstalledCertificateIdsResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetInstalledCertificateIdsResponse
    {
        [JsonProperty("certificateHashDataChain", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<CertificateHashDataChainType> CertificateHashDataChain { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("status")]
        public virtual GetInstalledCertificateStatusEnumType Status { get; set; }

        [JsonProperty("statusInfo", NullValueHandling = NullValueHandling.Ignore)]
        public virtual StatusInfoType StatusInfo { get; set; }
    }

    public partial class CertificateHashDataChainType
    {
        [JsonProperty("certificateHashData")]
        public virtual CertificateHashDataType CertificateHashData { get; set; }

        [JsonProperty("certificateType")]
        public virtual GetCertificateIdUseEnumType CertificateType { get; set; }

        [JsonProperty("childCertificateHashData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<CertificateHashDataType> ChildCertificateHashData { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }
    }

    public partial class CertificateHashDataType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("hashAlgorithm")]
        public virtual HashAlgorithmEnumType HashAlgorithm { get; set; }

        /// <summary>
        /// Hashed value of the issuers public key
        /// </summary>
        [JsonProperty("issuerKeyHash")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string IssuerKeyHash { get; set; }

        /// <summary>
        /// Hashed value of the Issuer DN (Distinguished Name).
        /// </summary>
        [JsonProperty("issuerNameHash")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string IssuerNameHash { get; set; }

        /// <summary>
        /// The serial number of the certificate.
        /// </summary>
        [JsonProperty("serialNumber")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string SerialNumber { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Element providing more information about the status.
    /// </summary>
    public partial class StatusInfoType
    {
        /// <summary>
        /// Additional text to provide detailed information.
        /// </summary>
        [JsonProperty("additionalInfo", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string AdditionalInfo { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// A predefined code for the reason why the status is returned in this response. The string
        /// is case-insensitive.
        /// </summary>
        [JsonProperty("reasonCode")]
        [JsonConverter(typeof(IndigoMinMaxLengthCheckConverter))]
        public virtual string ReasonCode { get; set; }
    }

    /// <summary>
    /// Used algorithms for the hashes provided.
    /// </summary>
    public enum HashAlgorithmEnumType { Sha256, Sha384, Sha512 };

    /// <summary>
    /// Indicates the type of the requested certificate(s).
    /// </summary>
    public enum GetCertificateIdUseEnumType { CsmsRootCertificate, ManufacturerRootCertificate, MoRootCertificate, V2GCertificateChain, V2GRootCertificate };

    /// <summary>
    /// Charging Station indicates if it can process the request.
    /// </summary>
    public enum GetInstalledCertificateStatusEnumType { Accepted, NotFound };

    public partial class GetInstalledCertificateIdsResponse
    {
        public static GetInstalledCertificateIdsResponse FromJson(string json) => JsonConvert.DeserializeObject<GetInstalledCertificateIdsResponse>(json, Ocpp._201.Generated.Models.GetInstalledCertificateIdsResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetInstalledCertificateIdsResponse self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.GetInstalledCertificateIdsResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                HashAlgorithmEnumTypeConverter.Singleton,
                GetCertificateIdUseEnumTypeConverter.Singleton,
                GetInstalledCertificateStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class HashAlgorithmEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HashAlgorithmEnumType) || t == typeof(HashAlgorithmEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "SHA256":
                    return HashAlgorithmEnumType.Sha256;
                case "SHA384":
                    return HashAlgorithmEnumType.Sha384;
                case "SHA512":
                    return HashAlgorithmEnumType.Sha512;
            }
            throw new Exception("Cannot unmarshal type HashAlgorithmEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (HashAlgorithmEnumType)untypedValue;
            switch (value)
            {
                case HashAlgorithmEnumType.Sha256:
                    serializer.Serialize(writer, "SHA256");
                    return;
                case HashAlgorithmEnumType.Sha384:
                    serializer.Serialize(writer, "SHA384");
                    return;
                case HashAlgorithmEnumType.Sha512:
                    serializer.Serialize(writer, "SHA512");
                    return;
            }
            throw new Exception("Cannot marshal type HashAlgorithmEnumType");
        }

        public static readonly HashAlgorithmEnumTypeConverter Singleton = new HashAlgorithmEnumTypeConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 128)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 128)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 40)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 40)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }

    internal class GetCertificateIdUseEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GetCertificateIdUseEnumType) || t == typeof(GetCertificateIdUseEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CSMSRootCertificate":
                    return GetCertificateIdUseEnumType.CsmsRootCertificate;
                case "MORootCertificate":
                    return GetCertificateIdUseEnumType.MoRootCertificate;
                case "ManufacturerRootCertificate":
                    return GetCertificateIdUseEnumType.ManufacturerRootCertificate;
                case "V2GCertificateChain":
                    return GetCertificateIdUseEnumType.V2GCertificateChain;
                case "V2GRootCertificate":
                    return GetCertificateIdUseEnumType.V2GRootCertificate;
            }
            throw new Exception("Cannot unmarshal type GetCertificateIdUseEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GetCertificateIdUseEnumType)untypedValue;
            switch (value)
            {
                case GetCertificateIdUseEnumType.CsmsRootCertificate:
                    serializer.Serialize(writer, "CSMSRootCertificate");
                    return;
                case GetCertificateIdUseEnumType.MoRootCertificate:
                    serializer.Serialize(writer, "MORootCertificate");
                    return;
                case GetCertificateIdUseEnumType.ManufacturerRootCertificate:
                    serializer.Serialize(writer, "ManufacturerRootCertificate");
                    return;
                case GetCertificateIdUseEnumType.V2GCertificateChain:
                    serializer.Serialize(writer, "V2GCertificateChain");
                    return;
                case GetCertificateIdUseEnumType.V2GRootCertificate:
                    serializer.Serialize(writer, "V2GRootCertificate");
                    return;
            }
            throw new Exception("Cannot marshal type GetCertificateIdUseEnumType");
        }

        public static readonly GetCertificateIdUseEnumTypeConverter Singleton = new GetCertificateIdUseEnumTypeConverter();
    }

    internal class GetInstalledCertificateStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GetInstalledCertificateStatusEnumType) || t == typeof(GetInstalledCertificateStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Accepted":
                    return GetInstalledCertificateStatusEnumType.Accepted;
                case "NotFound":
                    return GetInstalledCertificateStatusEnumType.NotFound;
            }
            throw new Exception("Cannot unmarshal type GetInstalledCertificateStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GetInstalledCertificateStatusEnumType)untypedValue;
            switch (value)
            {
                case GetInstalledCertificateStatusEnumType.Accepted:
                    serializer.Serialize(writer, "Accepted");
                    return;
                case GetInstalledCertificateStatusEnumType.NotFound:
                    serializer.Serialize(writer, "NotFound");
                    return;
            }
            throw new Exception("Cannot marshal type GetInstalledCertificateStatusEnumType");
        }

        public static readonly GetInstalledCertificateStatusEnumTypeConverter Singleton = new GetInstalledCertificateStatusEnumTypeConverter();
    }

    internal class StickyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly StickyMinMaxLengthCheckConverter Singleton = new StickyMinMaxLengthCheckConverter();
    }

    internal class IndigoMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 20)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 20)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly IndigoMinMaxLengthCheckConverter Singleton = new IndigoMinMaxLengthCheckConverter();
    }
}
