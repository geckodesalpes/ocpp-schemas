// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.GetLogRequest;
//
//    var getLogRequest = GetLogRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.GetLogRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetLogRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("log")]
        public virtual LogParametersType Log { get; set; }

        [JsonProperty("logType")]
        public virtual LogEnumType LogType { get; set; }

        /// <summary>
        /// The Id of this request
        /// </summary>
        [JsonProperty("requestId")]
        public virtual long RequestId { get; set; }

        /// <summary>
        /// This specifies how many times the Charging Station must try to upload the log before
        /// giving up. If this field is not present, it is left to Charging Station to decide how
        /// many times it wants to retry.
        /// </summary>
        [JsonProperty("retries", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? Retries { get; set; }

        /// <summary>
        /// The interval in seconds after which a retry may be attempted. If this field is not
        /// present, it is left to Charging Station to decide how long to wait between attempts.
        /// </summary>
        [JsonProperty("retryInterval", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? RetryInterval { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Log
    /// urn:x-enexis:ecdm:uid:2:233373
    /// Generic class for the configuration of logging entries.
    /// </summary>
    public partial class LogParametersType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Log. Latest_ Timestamp. Date_ Time
        /// urn:x-enexis:ecdm:uid:1:569482
        /// This contains the date and time of the latest logging information to include in the
        /// diagnostics.
        /// </summary>
        [JsonProperty("latestTimestamp", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? LatestTimestamp { get; set; }

        /// <summary>
        /// Log. Oldest_ Timestamp. Date_ Time
        /// urn:x-enexis:ecdm:uid:1:569477
        /// This contains the date and time of the oldest logging information to include in the
        /// diagnostics.
        /// </summary>
        [JsonProperty("oldestTimestamp", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? OldestTimestamp { get; set; }

        /// <summary>
        /// Log. Remote_ Location. URI
        /// urn:x-enexis:ecdm:uid:1:569484
        /// The URL of the location at the remote system where the log should be stored.
        /// </summary>
        [JsonProperty("remoteLocation")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string RemoteLocation { get; set; }
    }

    /// <summary>
    /// This contains the type of log file that the Charging Station
    /// should send.
    /// </summary>
    public enum LogEnumType { DiagnosticsLog, SecurityLog };

    public partial class GetLogRequest
    {
        public static GetLogRequest FromJson(string json) => JsonConvert.DeserializeObject<GetLogRequest>(json, Ocpp._201.Generated.Models.GetLogRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetLogRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.GetLogRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LogEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class LogEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LogEnumType) || t == typeof(LogEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DiagnosticsLog":
                    return LogEnumType.DiagnosticsLog;
                case "SecurityLog":
                    return LogEnumType.SecurityLog;
            }
            throw new Exception("Cannot unmarshal type LogEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LogEnumType)untypedValue;
            switch (value)
            {
                case LogEnumType.DiagnosticsLog:
                    serializer.Serialize(writer, "DiagnosticsLog");
                    return;
                case LogEnumType.SecurityLog:
                    serializer.Serialize(writer, "SecurityLog");
                    return;
            }
            throw new Exception("Cannot marshal type LogEnumType");
        }

        public static readonly LogEnumTypeConverter Singleton = new LogEnumTypeConverter();
    }
}
