// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.InstallCertificateRequest;
//
//    var installCertificateRequest = InstallCertificateRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.InstallCertificateRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InstallCertificateRequest
    {
        /// <summary>
        /// A PEM encoded X.509 certificate.
        /// </summary>
        [JsonProperty("certificate")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string Certificate { get; set; }

        [JsonProperty("certificateType")]
        public virtual InstallCertificateUseEnumType CertificateType { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Indicates the certificate type that is sent.
    /// </summary>
    public enum InstallCertificateUseEnumType { CsmsRootCertificate, ManufacturerRootCertificate, MoRootCertificate, V2GRootCertificate };

    public partial class InstallCertificateRequest
    {
        public static InstallCertificateRequest FromJson(string json) => JsonConvert.DeserializeObject<InstallCertificateRequest>(json, Ocpp._201.Generated.Models.InstallCertificateRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this InstallCertificateRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.InstallCertificateRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                InstallCertificateUseEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 5500)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 5500)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class InstallCertificateUseEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(InstallCertificateUseEnumType) || t == typeof(InstallCertificateUseEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CSMSRootCertificate":
                    return InstallCertificateUseEnumType.CsmsRootCertificate;
                case "MORootCertificate":
                    return InstallCertificateUseEnumType.MoRootCertificate;
                case "ManufacturerRootCertificate":
                    return InstallCertificateUseEnumType.ManufacturerRootCertificate;
                case "V2GRootCertificate":
                    return InstallCertificateUseEnumType.V2GRootCertificate;
            }
            throw new Exception("Cannot unmarshal type InstallCertificateUseEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (InstallCertificateUseEnumType)untypedValue;
            switch (value)
            {
                case InstallCertificateUseEnumType.CsmsRootCertificate:
                    serializer.Serialize(writer, "CSMSRootCertificate");
                    return;
                case InstallCertificateUseEnumType.MoRootCertificate:
                    serializer.Serialize(writer, "MORootCertificate");
                    return;
                case InstallCertificateUseEnumType.ManufacturerRootCertificate:
                    serializer.Serialize(writer, "ManufacturerRootCertificate");
                    return;
                case InstallCertificateUseEnumType.V2GRootCertificate:
                    serializer.Serialize(writer, "V2GRootCertificate");
                    return;
            }
            throw new Exception("Cannot marshal type InstallCertificateUseEnumType");
        }

        public static readonly InstallCertificateUseEnumTypeConverter Singleton = new InstallCertificateUseEnumTypeConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }
}
