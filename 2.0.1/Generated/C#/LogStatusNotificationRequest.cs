// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.LogStatusNotificationRequest;
//
//    var logStatusNotificationRequest = LogStatusNotificationRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.LogStatusNotificationRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LogStatusNotificationRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// The request id that was provided in GetLogRequest that started this log upload. This
        /// field is mandatory,
        /// unless the message was triggered by a TriggerMessageRequest AND there is no log upload
        /// ongoing.
        /// </summary>
        [JsonProperty("requestId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? RequestId { get; set; }

        [JsonProperty("status")]
        public virtual UploadLogStatusEnumType Status { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// This contains the status of the log upload.
    /// </summary>
    public enum UploadLogStatusEnumType { AcceptedCanceled, BadMessage, Idle, NotSupportedOperation, PermissionDenied, UploadFailure, Uploaded, Uploading };

    public partial class LogStatusNotificationRequest
    {
        public static LogStatusNotificationRequest FromJson(string json) => JsonConvert.DeserializeObject<LogStatusNotificationRequest>(json, Ocpp._201.Generated.Models.LogStatusNotificationRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LogStatusNotificationRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.LogStatusNotificationRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                UploadLogStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class UploadLogStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UploadLogStatusEnumType) || t == typeof(UploadLogStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AcceptedCanceled":
                    return UploadLogStatusEnumType.AcceptedCanceled;
                case "BadMessage":
                    return UploadLogStatusEnumType.BadMessage;
                case "Idle":
                    return UploadLogStatusEnumType.Idle;
                case "NotSupportedOperation":
                    return UploadLogStatusEnumType.NotSupportedOperation;
                case "PermissionDenied":
                    return UploadLogStatusEnumType.PermissionDenied;
                case "UploadFailure":
                    return UploadLogStatusEnumType.UploadFailure;
                case "Uploaded":
                    return UploadLogStatusEnumType.Uploaded;
                case "Uploading":
                    return UploadLogStatusEnumType.Uploading;
            }
            throw new Exception("Cannot unmarshal type UploadLogStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UploadLogStatusEnumType)untypedValue;
            switch (value)
            {
                case UploadLogStatusEnumType.AcceptedCanceled:
                    serializer.Serialize(writer, "AcceptedCanceled");
                    return;
                case UploadLogStatusEnumType.BadMessage:
                    serializer.Serialize(writer, "BadMessage");
                    return;
                case UploadLogStatusEnumType.Idle:
                    serializer.Serialize(writer, "Idle");
                    return;
                case UploadLogStatusEnumType.NotSupportedOperation:
                    serializer.Serialize(writer, "NotSupportedOperation");
                    return;
                case UploadLogStatusEnumType.PermissionDenied:
                    serializer.Serialize(writer, "PermissionDenied");
                    return;
                case UploadLogStatusEnumType.UploadFailure:
                    serializer.Serialize(writer, "UploadFailure");
                    return;
                case UploadLogStatusEnumType.Uploaded:
                    serializer.Serialize(writer, "Uploaded");
                    return;
                case UploadLogStatusEnumType.Uploading:
                    serializer.Serialize(writer, "Uploading");
                    return;
            }
            throw new Exception("Cannot marshal type UploadLogStatusEnumType");
        }

        public static readonly UploadLogStatusEnumTypeConverter Singleton = new UploadLogStatusEnumTypeConverter();
    }
}
