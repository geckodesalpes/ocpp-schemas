// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.NotifyDisplayMessagesRequest;
//
//    var notifyDisplayMessagesRequest = NotifyDisplayMessagesRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.NotifyDisplayMessagesRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NotifyDisplayMessagesRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("messageInfo", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<MessageInfoType> MessageInfo { get; set; }

        /// <summary>
        /// The id of the &lt;&lt;getdisplaymessagesrequest,GetDisplayMessagesRequest&gt;&gt; that
        /// requested this message.
        /// </summary>
        [JsonProperty("requestId")]
        public virtual long RequestId { get; set; }

        /// <summary>
        /// "to be continued" indicator. Indicates whether another part of the report follows in an
        /// upcoming NotifyDisplayMessagesRequest message. Default value when omitted is false.
        /// </summary>
        [JsonProperty("tbc", NullValueHandling = NullValueHandling.Ignore)]
        public virtual bool? Tbc { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Message_ Info
    /// urn:x-enexis:ecdm:uid:2:233264
    /// Contains message details, for a message to be displayed on a Charging Station.
    /// </summary>
    public partial class MessageInfoType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("display", NullValueHandling = NullValueHandling.Ignore)]
        public virtual ComponentType Display { get; set; }

        /// <summary>
        /// Message_ Info. End. Date_ Time
        /// urn:x-enexis:ecdm:uid:1:569257
        /// Until what date-time should this message be shown, after this date/time this message
        /// SHALL be removed.
        /// </summary>
        [JsonProperty("endDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? EndDateTime { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// Master resource identifier, unique within an exchange context. It is defined within the
        /// OCPP context as a positive Integer value (greater or equal to zero).
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }

        [JsonProperty("message")]
        public virtual MessageContentType Message { get; set; }

        [JsonProperty("priority")]
        public virtual MessagePriorityEnumType Priority { get; set; }

        /// <summary>
        /// Message_ Info. Start. Date_ Time
        /// urn:x-enexis:ecdm:uid:1:569256
        /// From what date-time should this message be shown. If omitted: directly.
        /// </summary>
        [JsonProperty("startDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? StartDateTime { get; set; }

        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public virtual MessageStateEnumType? State { get; set; }

        /// <summary>
        /// During which transaction shall this message be shown.
        /// Message SHALL be removed by the Charging Station after transaction has
        /// ended.
        /// </summary>
        [JsonProperty("transactionId", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(IndigoMinMaxLengthCheckConverter))]
        public virtual string TransactionId { get; set; }
    }

    /// <summary>
    /// A physical or logical component
    /// </summary>
    public partial class ComponentType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("evse", NullValueHandling = NullValueHandling.Ignore)]
        public virtual EvseType Evse { get; set; }

        /// <summary>
        /// Name of instance in case the component exists as multiple instances. Case Insensitive.
        /// strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("instance", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string Instance { get; set; }

        /// <summary>
        /// Name of the component. Name should be taken from the list of standardized component names
        /// whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("name")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string Name { get; set; }
    }

    /// <summary>
    /// EVSE
    /// urn:x-oca:ocpp:uid:2:233123
    /// Electric Vehicle Supply Equipment
    /// </summary>
    public partial class EvseType
    {
        /// <summary>
        /// An id to designate a specific connector (on an EVSE) by connector index number.
        /// </summary>
        [JsonProperty("connectorId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ConnectorId { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging
        /// Station.
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }
    }

    /// <summary>
    /// Message_ Content
    /// urn:x-enexis:ecdm:uid:2:234490
    /// Contains message details, for a message to be displayed on a Charging Station.
    /// </summary>
    public partial class MessageContentType
    {
        /// <summary>
        /// Message_ Content. Content. Message
        /// urn:x-enexis:ecdm:uid:1:570852
        /// Message contents.
        /// </summary>
        [JsonProperty("content")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Content { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("format")]
        public virtual MessageFormatEnumType Format { get; set; }

        /// <summary>
        /// Message_ Content. Language. Language_ Code
        /// urn:x-enexis:ecdm:uid:1:570849
        /// Message language identifier. Contains a language code as defined in
        /// &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;.
        /// </summary>
        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Language { get; set; }
    }

    /// <summary>
    /// Message_ Content. Format. Message_ Format_ Code
    /// urn:x-enexis:ecdm:uid:1:570848
    /// Format of the message.
    /// </summary>
    public enum MessageFormatEnumType { Ascii, Html, Uri, Utf8 };

    /// <summary>
    /// Message_ Info. Priority. Message_ Priority_ Code
    /// urn:x-enexis:ecdm:uid:1:569253
    /// With what priority should this message be shown
    /// </summary>
    public enum MessagePriorityEnumType { AlwaysFront, InFront, NormalCycle };

    /// <summary>
    /// Message_ Info. State. Message_ State_ Code
    /// urn:x-enexis:ecdm:uid:1:569254
    /// During what state should this message be shown. When omitted this message should be shown
    /// in any state of the Charging Station.
    /// </summary>
    public enum MessageStateEnumType { Charging, Faulted, Idle, Unavailable };

    public partial class NotifyDisplayMessagesRequest
    {
        public static NotifyDisplayMessagesRequest FromJson(string json) => JsonConvert.DeserializeObject<NotifyDisplayMessagesRequest>(json, Ocpp._201.Generated.Models.NotifyDisplayMessagesRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NotifyDisplayMessagesRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.NotifyDisplayMessagesRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MessageFormatEnumTypeConverter.Singleton,
                MessagePriorityEnumTypeConverter.Singleton,
                MessageStateEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }

    internal class MessageFormatEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessageFormatEnumType) || t == typeof(MessageFormatEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ASCII":
                    return MessageFormatEnumType.Ascii;
                case "HTML":
                    return MessageFormatEnumType.Html;
                case "URI":
                    return MessageFormatEnumType.Uri;
                case "UTF8":
                    return MessageFormatEnumType.Utf8;
            }
            throw new Exception("Cannot unmarshal type MessageFormatEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessageFormatEnumType)untypedValue;
            switch (value)
            {
                case MessageFormatEnumType.Ascii:
                    serializer.Serialize(writer, "ASCII");
                    return;
                case MessageFormatEnumType.Html:
                    serializer.Serialize(writer, "HTML");
                    return;
                case MessageFormatEnumType.Uri:
                    serializer.Serialize(writer, "URI");
                    return;
                case MessageFormatEnumType.Utf8:
                    serializer.Serialize(writer, "UTF8");
                    return;
            }
            throw new Exception("Cannot marshal type MessageFormatEnumType");
        }

        public static readonly MessageFormatEnumTypeConverter Singleton = new MessageFormatEnumTypeConverter();
    }

    internal class StickyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 8)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 8)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly StickyMinMaxLengthCheckConverter Singleton = new StickyMinMaxLengthCheckConverter();
    }

    internal class MessagePriorityEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessagePriorityEnumType) || t == typeof(MessagePriorityEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AlwaysFront":
                    return MessagePriorityEnumType.AlwaysFront;
                case "InFront":
                    return MessagePriorityEnumType.InFront;
                case "NormalCycle":
                    return MessagePriorityEnumType.NormalCycle;
            }
            throw new Exception("Cannot unmarshal type MessagePriorityEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessagePriorityEnumType)untypedValue;
            switch (value)
            {
                case MessagePriorityEnumType.AlwaysFront:
                    serializer.Serialize(writer, "AlwaysFront");
                    return;
                case MessagePriorityEnumType.InFront:
                    serializer.Serialize(writer, "InFront");
                    return;
                case MessagePriorityEnumType.NormalCycle:
                    serializer.Serialize(writer, "NormalCycle");
                    return;
            }
            throw new Exception("Cannot marshal type MessagePriorityEnumType");
        }

        public static readonly MessagePriorityEnumTypeConverter Singleton = new MessagePriorityEnumTypeConverter();
    }

    internal class MessageStateEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessageStateEnumType) || t == typeof(MessageStateEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Charging":
                    return MessageStateEnumType.Charging;
                case "Faulted":
                    return MessageStateEnumType.Faulted;
                case "Idle":
                    return MessageStateEnumType.Idle;
                case "Unavailable":
                    return MessageStateEnumType.Unavailable;
            }
            throw new Exception("Cannot unmarshal type MessageStateEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessageStateEnumType)untypedValue;
            switch (value)
            {
                case MessageStateEnumType.Charging:
                    serializer.Serialize(writer, "Charging");
                    return;
                case MessageStateEnumType.Faulted:
                    serializer.Serialize(writer, "Faulted");
                    return;
                case MessageStateEnumType.Idle:
                    serializer.Serialize(writer, "Idle");
                    return;
                case MessageStateEnumType.Unavailable:
                    serializer.Serialize(writer, "Unavailable");
                    return;
            }
            throw new Exception("Cannot marshal type MessageStateEnumType");
        }

        public static readonly MessageStateEnumTypeConverter Singleton = new MessageStateEnumTypeConverter();
    }

    internal class IndigoMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 36)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 36)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly IndigoMinMaxLengthCheckConverter Singleton = new IndigoMinMaxLengthCheckConverter();
    }
}
