// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.NotifyEVChargingNeedsRequest;
//
//    var notifyEvChargingNeedsRequest = NotifyEvChargingNeedsRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.NotifyEVChargingNeedsRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NotifyEvChargingNeedsRequest
    {
        [JsonProperty("chargingNeeds")]
        public virtual ChargingNeedsType ChargingNeeds { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Defines the EVSE and connector to which the EV is connected. EvseId may not be 0.
        /// </summary>
        [JsonProperty("evseId")]
        public virtual long EvseId { get; set; }

        /// <summary>
        /// Contains the maximum schedule tuples the car supports per schedule.
        /// </summary>
        [JsonProperty("maxScheduleTuples", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? MaxScheduleTuples { get; set; }
    }

    /// <summary>
    /// Charging_ Needs
    /// urn:x-oca:ocpp:uid:2:233249
    /// </summary>
    public partial class ChargingNeedsType
    {
        [JsonProperty("acChargingParameters", NullValueHandling = NullValueHandling.Ignore)]
        public virtual AcChargingParametersType AcChargingParameters { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("dcChargingParameters", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DcChargingParametersType DcChargingParameters { get; set; }

        /// <summary>
        /// Charging_ Needs. Departure_ Time. Date_ Time
        /// urn:x-oca:ocpp:uid:1:569223
        /// Estimated departure time of the EV.
        /// </summary>
        [JsonProperty("departureTime", NullValueHandling = NullValueHandling.Ignore)]
        public virtual DateTimeOffset? DepartureTime { get; set; }

        [JsonProperty("requestedEnergyTransfer")]
        public virtual EnergyTransferModeEnumType RequestedEnergyTransfer { get; set; }
    }

    /// <summary>
    /// AC_ Charging_ Parameters
    /// urn:x-oca:ocpp:uid:2:233250
    /// EV AC charging parameters.
    /// </summary>
    public partial class AcChargingParametersType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
        /// urn:x-oca:ocpp:uid:1:569211
        /// Amount of energy requested (in Wh). This includes energy required for preconditioning.
        /// </summary>
        [JsonProperty("energyAmount")]
        public virtual long EnergyAmount { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. EV_ Max. Current
        /// urn:x-oca:ocpp:uid:1:569213
        /// Maximum current (amps) supported by the electric vehicle (per phase). Includes cable
        /// capacity.
        /// </summary>
        [JsonProperty("evMaxCurrent")]
        public virtual long EvMaxCurrent { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. EV_ Max. Voltage
        /// urn:x-oca:ocpp:uid:1:569214
        /// Maximum voltage supported by the electric vehicle
        /// </summary>
        [JsonProperty("evMaxVoltage")]
        public virtual long EvMaxVoltage { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. EV_ Min. Current
        /// urn:x-oca:ocpp:uid:1:569212
        /// Minimum current (amps) supported by the electric vehicle (per phase).
        /// </summary>
        [JsonProperty("evMinCurrent")]
        public virtual long EvMinCurrent { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// DC_ Charging_ Parameters
    /// urn:x-oca:ocpp:uid:2:233251
    /// EV DC charging parameters
    /// </summary>
    public partial class DcChargingParametersType
    {
        /// <summary>
        /// DC_ Charging_ Parameters. Bulk_ SOC. Percentage
        /// urn:x-oca:ocpp:uid:1:569222
        /// Percentage of SoC at which the EV considers a fast charging process to end. (possible
        /// values: 0 - 100)
        /// </summary>
        [JsonProperty("bulkSoC", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? BulkSoC { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
        /// urn:x-oca:ocpp:uid:1:569217
        /// Amount of energy requested (in Wh). This inludes energy required for preconditioning.
        /// </summary>
        [JsonProperty("energyAmount", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? EnergyAmount { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Energy_ Capacity. Numeric
        /// urn:x-oca:ocpp:uid:1:569220
        /// Capacity of the electric vehicle battery (in Wh)
        /// </summary>
        [JsonProperty("evEnergyCapacity", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? EvEnergyCapacity { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Max. Current
        /// urn:x-oca:ocpp:uid:1:569215
        /// Maximum current (amps) supported by the electric vehicle. Includes cable capacity.
        /// </summary>
        [JsonProperty("evMaxCurrent")]
        public virtual long EvMaxCurrent { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Max. Power
        /// urn:x-oca:ocpp:uid:1:569218
        /// Maximum power (in W) supported by the electric vehicle. Required for DC charging.
        /// </summary>
        [JsonProperty("evMaxPower", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? EvMaxPower { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Max. Voltage
        /// urn:x-oca:ocpp:uid:1:569216
        /// Maximum voltage supported by the electric vehicle
        /// </summary>
        [JsonProperty("evMaxVoltage")]
        public virtual long EvMaxVoltage { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. Full_ SOC. Percentage
        /// urn:x-oca:ocpp:uid:1:569221
        /// Percentage of SoC at which the EV considers the battery fully charged. (possible values:
        /// 0 - 100)
        /// </summary>
        [JsonProperty("fullSoC", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? FullSoC { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. State_ Of_ Charge. Numeric
        /// urn:x-oca:ocpp:uid:1:569219
        /// Energy available in the battery (in percent of the battery capacity)
        /// </summary>
        [JsonProperty("stateOfCharge", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? StateOfCharge { get; set; }
    }

    /// <summary>
    /// Charging_ Needs. Requested. Energy_ Transfer_ Mode_ Code
    /// urn:x-oca:ocpp:uid:1:569209
    /// Mode of energy transfer requested by the EV.
    /// </summary>
    public enum EnergyTransferModeEnumType { AcSinglePhase, AcThreePhase, AcTwoPhase, Dc };

    public partial class NotifyEvChargingNeedsRequest
    {
        public static NotifyEvChargingNeedsRequest FromJson(string json) => JsonConvert.DeserializeObject<NotifyEvChargingNeedsRequest>(json, Ocpp._201.Generated.Models.NotifyEVChargingNeedsRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NotifyEvChargingNeedsRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.NotifyEVChargingNeedsRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                EnergyTransferModeEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class EnergyTransferModeEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EnergyTransferModeEnumType) || t == typeof(EnergyTransferModeEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AC_single_phase":
                    return EnergyTransferModeEnumType.AcSinglePhase;
                case "AC_three_phase":
                    return EnergyTransferModeEnumType.AcThreePhase;
                case "AC_two_phase":
                    return EnergyTransferModeEnumType.AcTwoPhase;
                case "DC":
                    return EnergyTransferModeEnumType.Dc;
            }
            throw new Exception("Cannot unmarshal type EnergyTransferModeEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EnergyTransferModeEnumType)untypedValue;
            switch (value)
            {
                case EnergyTransferModeEnumType.AcSinglePhase:
                    serializer.Serialize(writer, "AC_single_phase");
                    return;
                case EnergyTransferModeEnumType.AcThreePhase:
                    serializer.Serialize(writer, "AC_three_phase");
                    return;
                case EnergyTransferModeEnumType.AcTwoPhase:
                    serializer.Serialize(writer, "AC_two_phase");
                    return;
                case EnergyTransferModeEnumType.Dc:
                    serializer.Serialize(writer, "DC");
                    return;
            }
            throw new Exception("Cannot marshal type EnergyTransferModeEnumType");
        }

        public static readonly EnergyTransferModeEnumTypeConverter Singleton = new EnergyTransferModeEnumTypeConverter();
    }
}
