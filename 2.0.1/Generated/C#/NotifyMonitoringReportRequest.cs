// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.NotifyMonitoringReportRequest;
//
//    var notifyMonitoringReportRequest = NotifyMonitoringReportRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.NotifyMonitoringReportRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class NotifyMonitoringReportRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Timestamp of the moment this message was generated at the Charging Station.
        /// </summary>
        [JsonProperty("generatedAt")]
        public virtual DateTimeOffset GeneratedAt { get; set; }

        [JsonProperty("monitor", NullValueHandling = NullValueHandling.Ignore)]
        public virtual System.Collections.Generic.List<MonitoringDataType> Monitor { get; set; }

        /// <summary>
        /// The id of the GetMonitoringRequest that requested this report.
        /// </summary>
        [JsonProperty("requestId")]
        public virtual long RequestId { get; set; }

        /// <summary>
        /// Sequence number of this message. First message starts at 0.
        /// </summary>
        [JsonProperty("seqNo")]
        public virtual long SeqNo { get; set; }

        /// <summary>
        /// “to be continued” indicator. Indicates whether another part of the monitoringData follows
        /// in an upcoming notifyMonitoringReportRequest message. Default value when omitted is false.
        /// </summary>
        [JsonProperty("tbc", NullValueHandling = NullValueHandling.Ignore)]
        public virtual bool? Tbc { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Class to hold parameters of SetVariableMonitoring request.
    /// </summary>
    public partial class MonitoringDataType
    {
        [JsonProperty("component")]
        public virtual ComponentType Component { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("variable")]
        public virtual VariableType Variable { get; set; }

        [JsonProperty("variableMonitoring")]
        public virtual System.Collections.Generic.List<VariableMonitoringType> VariableMonitoring { get; set; }
    }

    /// <summary>
    /// A physical or logical component
    /// </summary>
    public partial class ComponentType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("evse", NullValueHandling = NullValueHandling.Ignore)]
        public virtual EvseType Evse { get; set; }

        /// <summary>
        /// Name of instance in case the component exists as multiple instances. Case Insensitive.
        /// strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("instance", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string Instance { get; set; }

        /// <summary>
        /// Name of the component. Name should be taken from the list of standardized component names
        /// whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("name")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string Name { get; set; }
    }

    /// <summary>
    /// EVSE
    /// urn:x-oca:ocpp:uid:2:233123
    /// Electric Vehicle Supply Equipment
    /// </summary>
    public partial class EvseType
    {
        /// <summary>
        /// An id to designate a specific connector (on an EVSE) by connector index number.
        /// </summary>
        [JsonProperty("connectorId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ConnectorId { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging
        /// Station.
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }
    }

    /// <summary>
    /// Reference key to a component-variable.
    /// </summary>
    public partial class VariableType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Name of instance in case the variable exists as multiple instances. Case Insensitive.
        /// strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("instance", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string Instance { get; set; }

        /// <summary>
        /// Name of the variable. Name should be taken from the list of standardized variable names
        /// whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("name")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string Name { get; set; }
    }

    /// <summary>
    /// A monitoring setting for a variable.
    /// </summary>
    public partial class VariableMonitoringType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identifies the monitor.
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }

        /// <summary>
        /// The severity that will be assigned to an event that is triggered by this monitor. The
        /// severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.
        ///
        /// The severity levels have the following meaning: +
        /// *0-Danger* +
        /// Indicates lives are potentially in danger. Urgent attention is needed and action should
        /// be taken immediately. +
        /// *1-Hardware Failure* +
        /// Indicates that the Charging Station is unable to continue regular operations due to
        /// Hardware issues. Action is required. +
        /// *2-System Failure* +
        /// Indicates that the Charging Station is unable to continue regular operations due to
        /// software or minor hardware issues. Action is required. +
        /// *3-Critical* +
        /// Indicates a critical error. Action is required. +
        /// *4-Error* +
        /// Indicates a non-urgent error. Action is required. +
        /// *5-Alert* +
        /// Indicates an alert event. Default severity for any type of monitoring event.  +
        /// *6-Warning* +
        /// Indicates a warning event. Action may be required. +
        /// *7-Notice* +
        /// Indicates an unusual event. No immediate action is required. +
        /// *8-Informational* +
        /// Indicates a regular operational event. May be used for reporting, measuring throughput,
        /// etc. No action is required. +
        /// *9-Debug* +
        /// Indicates information useful to developers for debugging, not useful during operations.
        /// </summary>
        [JsonProperty("severity")]
        public virtual long Severity { get; set; }

        /// <summary>
        /// Monitor only active when a transaction is ongoing on a component relevant to this
        /// transaction.
        /// </summary>
        [JsonProperty("transaction")]
        public virtual bool Transaction { get; set; }

        [JsonProperty("type")]
        public virtual MonitorEnumType Type { get; set; }

        /// <summary>
        /// Value for threshold or delta monitoring.
        /// For Periodic or PeriodicClockAligned this is the interval in seconds.
        /// </summary>
        [JsonProperty("value")]
        public virtual double Value { get; set; }
    }

    /// <summary>
    /// The type of this monitor, e.g. a threshold, delta or periodic monitor.
    /// </summary>
    public enum MonitorEnumType { Delta, LowerThreshold, Periodic, PeriodicClockAligned, UpperThreshold };

    public partial class NotifyMonitoringReportRequest
    {
        public static NotifyMonitoringReportRequest FromJson(string json) => JsonConvert.DeserializeObject<NotifyMonitoringReportRequest>(json, Ocpp._201.Generated.Models.NotifyMonitoringReportRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NotifyMonitoringReportRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.NotifyMonitoringReportRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MonitorEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class MonitorEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MonitorEnumType) || t == typeof(MonitorEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Delta":
                    return MonitorEnumType.Delta;
                case "LowerThreshold":
                    return MonitorEnumType.LowerThreshold;
                case "Periodic":
                    return MonitorEnumType.Periodic;
                case "PeriodicClockAligned":
                    return MonitorEnumType.PeriodicClockAligned;
                case "UpperThreshold":
                    return MonitorEnumType.UpperThreshold;
            }
            throw new Exception("Cannot unmarshal type MonitorEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MonitorEnumType)untypedValue;
            switch (value)
            {
                case MonitorEnumType.Delta:
                    serializer.Serialize(writer, "Delta");
                    return;
                case MonitorEnumType.LowerThreshold:
                    serializer.Serialize(writer, "LowerThreshold");
                    return;
                case MonitorEnumType.Periodic:
                    serializer.Serialize(writer, "Periodic");
                    return;
                case MonitorEnumType.PeriodicClockAligned:
                    serializer.Serialize(writer, "PeriodicClockAligned");
                    return;
                case MonitorEnumType.UpperThreshold:
                    serializer.Serialize(writer, "UpperThreshold");
                    return;
            }
            throw new Exception("Cannot marshal type MonitorEnumType");
        }

        public static readonly MonitorEnumTypeConverter Singleton = new MonitorEnumTypeConverter();
    }
}
