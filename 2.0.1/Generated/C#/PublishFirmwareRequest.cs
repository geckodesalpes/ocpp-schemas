// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.PublishFirmwareRequest;
//
//    var publishFirmwareRequest = PublishFirmwareRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.PublishFirmwareRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PublishFirmwareRequest
    {
        /// <summary>
        /// The MD5 checksum over the entire firmware file as a hexadecimal string of length 32.
        /// </summary>
        [JsonProperty("checksum")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string Checksum { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// This contains a string containing a URI pointing to a
        /// location from which to retrieve the firmware.
        /// </summary>
        [JsonProperty("location")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string Location { get; set; }

        /// <summary>
        /// The Id of the request.
        /// </summary>
        [JsonProperty("requestId")]
        public virtual long RequestId { get; set; }

        /// <summary>
        /// This specifies how many times Charging Station must try
        /// to download the firmware before giving up. If this field is not
        /// present, it is left to Charging Station to decide how many times it wants to retry.
        /// </summary>
        [JsonProperty("retries", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? Retries { get; set; }

        /// <summary>
        /// The interval in seconds
        /// after which a retry may be
        /// attempted. If this field is not
        /// present, it is left to Charging
        /// Station to decide how long to wait
        /// between attempts.
        /// </summary>
        [JsonProperty("retryInterval", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? RetryInterval { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    public partial class PublishFirmwareRequest
    {
        public static PublishFirmwareRequest FromJson(string json) => JsonConvert.DeserializeObject<PublishFirmwareRequest>(json, Ocpp._201.Generated.Models.PublishFirmwareRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PublishFirmwareRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.PublishFirmwareRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 32)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 32)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }
}
