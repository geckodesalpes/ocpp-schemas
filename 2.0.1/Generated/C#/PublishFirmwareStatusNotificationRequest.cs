// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.PublishFirmwareStatusNotificationRequest;
//
//    var publishFirmwareStatusNotificationRequest = PublishFirmwareStatusNotificationRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.PublishFirmwareStatusNotificationRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PublishFirmwareStatusNotificationRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Required if status is Published. Can be multiple URIâ€™s, if the Local Controller supports
        /// e.g. HTTP, HTTPS, and FTP.
        /// </summary>
        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public virtual System.Collections.Generic.List<string> Location { get; set; }

        /// <summary>
        /// The request id that was
        /// provided in the
        /// PublishFirmwareRequest which
        /// triggered this action.
        /// </summary>
        [JsonProperty("requestId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? RequestId { get; set; }

        [JsonProperty("status")]
        public virtual PublishFirmwareStatusEnumType Status { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// This contains the progress status of the publishfirmware
    /// installation.
    /// </summary>
    public enum PublishFirmwareStatusEnumType { ChecksumVerified, DownloadFailed, DownloadPaused, DownloadScheduled, Downloaded, Downloading, Idle, InvalidChecksum, PublishFailed, Published };

    public partial class PublishFirmwareStatusNotificationRequest
    {
        public static PublishFirmwareStatusNotificationRequest FromJson(string json) => JsonConvert.DeserializeObject<PublishFirmwareStatusNotificationRequest>(json, Ocpp._201.Generated.Models.PublishFirmwareStatusNotificationRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PublishFirmwareStatusNotificationRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.PublishFirmwareStatusNotificationRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PublishFirmwareStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(System.Collections.Generic.List<string>);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<string>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = FluffyMinMaxLengthCheckConverter.Singleton;
                var arrayItem = (string)converter.ReadJson(reader, typeof(string), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (System.Collections.Generic.List<string>)untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = FluffyMinMaxLengthCheckConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class PublishFirmwareStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PublishFirmwareStatusEnumType) || t == typeof(PublishFirmwareStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ChecksumVerified":
                    return PublishFirmwareStatusEnumType.ChecksumVerified;
                case "DownloadFailed":
                    return PublishFirmwareStatusEnumType.DownloadFailed;
                case "DownloadPaused":
                    return PublishFirmwareStatusEnumType.DownloadPaused;
                case "DownloadScheduled":
                    return PublishFirmwareStatusEnumType.DownloadScheduled;
                case "Downloaded":
                    return PublishFirmwareStatusEnumType.Downloaded;
                case "Downloading":
                    return PublishFirmwareStatusEnumType.Downloading;
                case "Idle":
                    return PublishFirmwareStatusEnumType.Idle;
                case "InvalidChecksum":
                    return PublishFirmwareStatusEnumType.InvalidChecksum;
                case "PublishFailed":
                    return PublishFirmwareStatusEnumType.PublishFailed;
                case "Published":
                    return PublishFirmwareStatusEnumType.Published;
            }
            throw new Exception("Cannot unmarshal type PublishFirmwareStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PublishFirmwareStatusEnumType)untypedValue;
            switch (value)
            {
                case PublishFirmwareStatusEnumType.ChecksumVerified:
                    serializer.Serialize(writer, "ChecksumVerified");
                    return;
                case PublishFirmwareStatusEnumType.DownloadFailed:
                    serializer.Serialize(writer, "DownloadFailed");
                    return;
                case PublishFirmwareStatusEnumType.DownloadPaused:
                    serializer.Serialize(writer, "DownloadPaused");
                    return;
                case PublishFirmwareStatusEnumType.DownloadScheduled:
                    serializer.Serialize(writer, "DownloadScheduled");
                    return;
                case PublishFirmwareStatusEnumType.Downloaded:
                    serializer.Serialize(writer, "Downloaded");
                    return;
                case PublishFirmwareStatusEnumType.Downloading:
                    serializer.Serialize(writer, "Downloading");
                    return;
                case PublishFirmwareStatusEnumType.Idle:
                    serializer.Serialize(writer, "Idle");
                    return;
                case PublishFirmwareStatusEnumType.InvalidChecksum:
                    serializer.Serialize(writer, "InvalidChecksum");
                    return;
                case PublishFirmwareStatusEnumType.PublishFailed:
                    serializer.Serialize(writer, "PublishFailed");
                    return;
                case PublishFirmwareStatusEnumType.Published:
                    serializer.Serialize(writer, "Published");
                    return;
            }
            throw new Exception("Cannot marshal type PublishFirmwareStatusEnumType");
        }

        public static readonly PublishFirmwareStatusEnumTypeConverter Singleton = new PublishFirmwareStatusEnumTypeConverter();
    }
}
