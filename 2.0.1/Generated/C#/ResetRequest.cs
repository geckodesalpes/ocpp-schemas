// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.ResetRequest;
//
//    var resetRequest = ResetRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.ResetRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ResetRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// This contains the ID of a specific EVSE that needs to be reset, instead of the entire
        /// Charging Station.
        /// </summary>
        [JsonProperty("evseId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? EvseId { get; set; }

        [JsonProperty("type")]
        public virtual ResetEnumType Type { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// This contains the type of reset that the Charging Station or EVSE should perform.
    /// </summary>
    public enum ResetEnumType { Immediate, OnIdle };

    public partial class ResetRequest
    {
        public static ResetRequest FromJson(string json) => JsonConvert.DeserializeObject<ResetRequest>(json, Ocpp._201.Generated.Models.ResetRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ResetRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.ResetRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ResetEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class ResetEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResetEnumType) || t == typeof(ResetEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Immediate":
                    return ResetEnumType.Immediate;
                case "OnIdle":
                    return ResetEnumType.OnIdle;
            }
            throw new Exception("Cannot unmarshal type ResetEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ResetEnumType)untypedValue;
            switch (value)
            {
                case ResetEnumType.Immediate:
                    serializer.Serialize(writer, "Immediate");
                    return;
                case ResetEnumType.OnIdle:
                    serializer.Serialize(writer, "OnIdle");
                    return;
            }
            throw new Exception("Cannot marshal type ResetEnumType");
        }

        public static readonly ResetEnumTypeConverter Singleton = new ResetEnumTypeConverter();
    }
}
