// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.SetVariablesResponse;
//
//    var setVariablesResponse = SetVariablesResponse.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.SetVariablesResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SetVariablesResponse
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("setVariableResult")]
        public virtual System.Collections.Generic.List<SetVariableResultType> SetVariableResult { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(PurpleMinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    public partial class SetVariableResultType
    {
        [JsonProperty("attributeStatus")]
        public virtual SetVariableStatusEnumType AttributeStatus { get; set; }

        [JsonProperty("attributeStatusInfo", NullValueHandling = NullValueHandling.Ignore)]
        public virtual StatusInfoType AttributeStatusInfo { get; set; }

        [JsonProperty("attributeType", NullValueHandling = NullValueHandling.Ignore)]
        public virtual AttributeEnumType? AttributeType { get; set; }

        [JsonProperty("component")]
        public virtual ComponentType Component { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("variable")]
        public virtual VariableType Variable { get; set; }
    }

    /// <summary>
    /// Element providing more information about the status.
    /// </summary>
    public partial class StatusInfoType
    {
        /// <summary>
        /// Additional text to provide detailed information.
        /// </summary>
        [JsonProperty("additionalInfo", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(FluffyMinMaxLengthCheckConverter))]
        public virtual string AdditionalInfo { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// A predefined code for the reason why the status is returned in this response. The string
        /// is case-insensitive.
        /// </summary>
        [JsonProperty("reasonCode")]
        [JsonConverter(typeof(TentacledMinMaxLengthCheckConverter))]
        public virtual string ReasonCode { get; set; }
    }

    /// <summary>
    /// A physical or logical component
    /// </summary>
    public partial class ComponentType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("evse", NullValueHandling = NullValueHandling.Ignore)]
        public virtual EvseType Evse { get; set; }

        /// <summary>
        /// Name of instance in case the component exists as multiple instances. Case Insensitive.
        /// strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("instance", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Instance { get; set; }

        /// <summary>
        /// Name of the component. Name should be taken from the list of standardized component names
        /// whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("name")]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Name { get; set; }
    }

    /// <summary>
    /// EVSE
    /// urn:x-oca:ocpp:uid:2:233123
    /// Electric Vehicle Supply Equipment
    /// </summary>
    public partial class EvseType
    {
        /// <summary>
        /// An id to designate a specific connector (on an EVSE) by connector index number.
        /// </summary>
        [JsonProperty("connectorId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ConnectorId { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging
        /// Station.
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }
    }

    /// <summary>
    /// Reference key to a component-variable.
    /// </summary>
    public partial class VariableType
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Name of instance in case the variable exists as multiple instances. Case Insensitive.
        /// strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("instance", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Instance { get; set; }

        /// <summary>
        /// Name of the variable. Name should be taken from the list of standardized variable names
        /// whenever possible. Case Insensitive. strongly advised to use Camel Case.
        /// </summary>
        [JsonProperty("name")]
        [JsonConverter(typeof(StickyMinMaxLengthCheckConverter))]
        public virtual string Name { get; set; }
    }

    /// <summary>
    /// Result status of setting the variable.
    /// </summary>
    public enum SetVariableStatusEnumType { Accepted, NotSupportedAttributeType, RebootRequired, Rejected, UnknownComponent, UnknownVariable };

    /// <summary>
    /// Type of attribute: Actual, Target, MinSet, MaxSet. Default is Actual when omitted.
    /// </summary>
    public enum AttributeEnumType { Actual, MaxSet, MinSet, Target };

    public partial class SetVariablesResponse
    {
        public static SetVariablesResponse FromJson(string json) => JsonConvert.DeserializeObject<SetVariablesResponse>(json, Ocpp._201.Generated.Models.SetVariablesResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SetVariablesResponse self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.SetVariablesResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                SetVariableStatusEnumTypeConverter.Singleton,
                AttributeEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly PurpleMinMaxLengthCheckConverter Singleton = new PurpleMinMaxLengthCheckConverter();
    }

    internal class SetVariableStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SetVariableStatusEnumType) || t == typeof(SetVariableStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Accepted":
                    return SetVariableStatusEnumType.Accepted;
                case "NotSupportedAttributeType":
                    return SetVariableStatusEnumType.NotSupportedAttributeType;
                case "RebootRequired":
                    return SetVariableStatusEnumType.RebootRequired;
                case "Rejected":
                    return SetVariableStatusEnumType.Rejected;
                case "UnknownComponent":
                    return SetVariableStatusEnumType.UnknownComponent;
                case "UnknownVariable":
                    return SetVariableStatusEnumType.UnknownVariable;
            }
            throw new Exception("Cannot unmarshal type SetVariableStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SetVariableStatusEnumType)untypedValue;
            switch (value)
            {
                case SetVariableStatusEnumType.Accepted:
                    serializer.Serialize(writer, "Accepted");
                    return;
                case SetVariableStatusEnumType.NotSupportedAttributeType:
                    serializer.Serialize(writer, "NotSupportedAttributeType");
                    return;
                case SetVariableStatusEnumType.RebootRequired:
                    serializer.Serialize(writer, "RebootRequired");
                    return;
                case SetVariableStatusEnumType.Rejected:
                    serializer.Serialize(writer, "Rejected");
                    return;
                case SetVariableStatusEnumType.UnknownComponent:
                    serializer.Serialize(writer, "UnknownComponent");
                    return;
                case SetVariableStatusEnumType.UnknownVariable:
                    serializer.Serialize(writer, "UnknownVariable");
                    return;
            }
            throw new Exception("Cannot marshal type SetVariableStatusEnumType");
        }

        public static readonly SetVariableStatusEnumTypeConverter Singleton = new SetVariableStatusEnumTypeConverter();
    }

    internal class FluffyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 512)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 512)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly FluffyMinMaxLengthCheckConverter Singleton = new FluffyMinMaxLengthCheckConverter();
    }

    internal class TentacledMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 20)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 20)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly TentacledMinMaxLengthCheckConverter Singleton = new TentacledMinMaxLengthCheckConverter();
    }

    internal class AttributeEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AttributeEnumType) || t == typeof(AttributeEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Actual":
                    return AttributeEnumType.Actual;
                case "MaxSet":
                    return AttributeEnumType.MaxSet;
                case "MinSet":
                    return AttributeEnumType.MinSet;
                case "Target":
                    return AttributeEnumType.Target;
            }
            throw new Exception("Cannot unmarshal type AttributeEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AttributeEnumType)untypedValue;
            switch (value)
            {
                case AttributeEnumType.Actual:
                    serializer.Serialize(writer, "Actual");
                    return;
                case AttributeEnumType.MaxSet:
                    serializer.Serialize(writer, "MaxSet");
                    return;
                case AttributeEnumType.MinSet:
                    serializer.Serialize(writer, "MinSet");
                    return;
                case AttributeEnumType.Target:
                    serializer.Serialize(writer, "Target");
                    return;
            }
            throw new Exception("Cannot marshal type AttributeEnumType");
        }

        public static readonly AttributeEnumTypeConverter Singleton = new AttributeEnumTypeConverter();
    }

    internal class StickyMinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 50)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 50)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly StickyMinMaxLengthCheckConverter Singleton = new StickyMinMaxLengthCheckConverter();
    }
}
