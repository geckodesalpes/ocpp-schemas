// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.StatusNotificationRequest;
//
//    var statusNotificationRequest = StatusNotificationRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.StatusNotificationRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class StatusNotificationRequest
    {
        /// <summary>
        /// The id of the connector within the EVSE for which the status is reported.
        /// </summary>
        [JsonProperty("connectorId")]
        public virtual long ConnectorId { get; set; }

        [JsonProperty("connectorStatus")]
        public virtual ConnectorStatusEnumType ConnectorStatus { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// The id of the EVSE to which the connector belongs for which the the status is reported.
        /// </summary>
        [JsonProperty("evseId")]
        public virtual long EvseId { get; set; }

        /// <summary>
        /// The time for which the status is reported. If absent time of receipt of the message will
        /// be assumed.
        /// </summary>
        [JsonProperty("timestamp")]
        public virtual DateTimeOffset Timestamp { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// This contains the current status of the Connector.
    /// </summary>
    public enum ConnectorStatusEnumType { Available, Faulted, Occupied, Reserved, Unavailable };

    public partial class StatusNotificationRequest
    {
        public static StatusNotificationRequest FromJson(string json) => JsonConvert.DeserializeObject<StatusNotificationRequest>(json, Ocpp._201.Generated.Models.StatusNotificationRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this StatusNotificationRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.StatusNotificationRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ConnectorStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ConnectorStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConnectorStatusEnumType) || t == typeof(ConnectorStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Available":
                    return ConnectorStatusEnumType.Available;
                case "Faulted":
                    return ConnectorStatusEnumType.Faulted;
                case "Occupied":
                    return ConnectorStatusEnumType.Occupied;
                case "Reserved":
                    return ConnectorStatusEnumType.Reserved;
                case "Unavailable":
                    return ConnectorStatusEnumType.Unavailable;
            }
            throw new Exception("Cannot unmarshal type ConnectorStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConnectorStatusEnumType)untypedValue;
            switch (value)
            {
                case ConnectorStatusEnumType.Available:
                    serializer.Serialize(writer, "Available");
                    return;
                case ConnectorStatusEnumType.Faulted:
                    serializer.Serialize(writer, "Faulted");
                    return;
                case ConnectorStatusEnumType.Occupied:
                    serializer.Serialize(writer, "Occupied");
                    return;
                case ConnectorStatusEnumType.Reserved:
                    serializer.Serialize(writer, "Reserved");
                    return;
                case ConnectorStatusEnumType.Unavailable:
                    serializer.Serialize(writer, "Unavailable");
                    return;
            }
            throw new Exception("Cannot marshal type ConnectorStatusEnumType");
        }

        public static readonly ConnectorStatusEnumTypeConverter Singleton = new ConnectorStatusEnumTypeConverter();
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }
}
