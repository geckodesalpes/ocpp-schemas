// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.TriggerMessageRequest;
//
//    var triggerMessageRequest = TriggerMessageRequest.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.TriggerMessageRequest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TriggerMessageRequest
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("evse", NullValueHandling = NullValueHandling.Ignore)]
        public virtual EvseType Evse { get; set; }

        [JsonProperty("requestedMessage")]
        public virtual MessageTriggerEnumType RequestedMessage { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// EVSE
    /// urn:x-oca:ocpp:uid:2:233123
    /// Electric Vehicle Supply Equipment
    /// </summary>
    public partial class EvseType
    {
        /// <summary>
        /// An id to designate a specific connector (on an EVSE) by connector index number.
        /// </summary>
        [JsonProperty("connectorId", NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? ConnectorId { get; set; }

        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        /// <summary>
        /// Identified_ Object. MRID. Numeric_ Identifier
        /// urn:x-enexis:ecdm:uid:1:569198
        /// EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging
        /// Station.
        /// </summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }
    }

    /// <summary>
    /// Type of message to be triggered.
    /// </summary>
    public enum MessageTriggerEnumType { BootNotification, FirmwareStatusNotification, Heartbeat, LogStatusNotification, MeterValues, PublishFirmwareStatusNotification, SignChargingStationCertificate, SignCombinedCertificate, SignV2GCertificate, StatusNotification, TransactionEvent };

    public partial class TriggerMessageRequest
    {
        public static TriggerMessageRequest FromJson(string json) => JsonConvert.DeserializeObject<TriggerMessageRequest>(json, Ocpp._201.Generated.Models.TriggerMessageRequest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TriggerMessageRequest self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.TriggerMessageRequest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MessageTriggerEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class MessageTriggerEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessageTriggerEnumType) || t == typeof(MessageTriggerEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BootNotification":
                    return MessageTriggerEnumType.BootNotification;
                case "FirmwareStatusNotification":
                    return MessageTriggerEnumType.FirmwareStatusNotification;
                case "Heartbeat":
                    return MessageTriggerEnumType.Heartbeat;
                case "LogStatusNotification":
                    return MessageTriggerEnumType.LogStatusNotification;
                case "MeterValues":
                    return MessageTriggerEnumType.MeterValues;
                case "PublishFirmwareStatusNotification":
                    return MessageTriggerEnumType.PublishFirmwareStatusNotification;
                case "SignChargingStationCertificate":
                    return MessageTriggerEnumType.SignChargingStationCertificate;
                case "SignCombinedCertificate":
                    return MessageTriggerEnumType.SignCombinedCertificate;
                case "SignV2GCertificate":
                    return MessageTriggerEnumType.SignV2GCertificate;
                case "StatusNotification":
                    return MessageTriggerEnumType.StatusNotification;
                case "TransactionEvent":
                    return MessageTriggerEnumType.TransactionEvent;
            }
            throw new Exception("Cannot unmarshal type MessageTriggerEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MessageTriggerEnumType)untypedValue;
            switch (value)
            {
                case MessageTriggerEnumType.BootNotification:
                    serializer.Serialize(writer, "BootNotification");
                    return;
                case MessageTriggerEnumType.FirmwareStatusNotification:
                    serializer.Serialize(writer, "FirmwareStatusNotification");
                    return;
                case MessageTriggerEnumType.Heartbeat:
                    serializer.Serialize(writer, "Heartbeat");
                    return;
                case MessageTriggerEnumType.LogStatusNotification:
                    serializer.Serialize(writer, "LogStatusNotification");
                    return;
                case MessageTriggerEnumType.MeterValues:
                    serializer.Serialize(writer, "MeterValues");
                    return;
                case MessageTriggerEnumType.PublishFirmwareStatusNotification:
                    serializer.Serialize(writer, "PublishFirmwareStatusNotification");
                    return;
                case MessageTriggerEnumType.SignChargingStationCertificate:
                    serializer.Serialize(writer, "SignChargingStationCertificate");
                    return;
                case MessageTriggerEnumType.SignCombinedCertificate:
                    serializer.Serialize(writer, "SignCombinedCertificate");
                    return;
                case MessageTriggerEnumType.SignV2GCertificate:
                    serializer.Serialize(writer, "SignV2GCertificate");
                    return;
                case MessageTriggerEnumType.StatusNotification:
                    serializer.Serialize(writer, "StatusNotification");
                    return;
                case MessageTriggerEnumType.TransactionEvent:
                    serializer.Serialize(writer, "TransactionEvent");
                    return;
            }
            throw new Exception("Cannot marshal type MessageTriggerEnumType");
        }

        public static readonly MessageTriggerEnumTypeConverter Singleton = new MessageTriggerEnumTypeConverter();
    }
}
