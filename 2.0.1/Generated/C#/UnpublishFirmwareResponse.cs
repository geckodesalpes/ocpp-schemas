// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ocpp._201.Generated.Models.UnpublishFirmwareResponse;
//
//    var unpublishFirmwareResponse = UnpublishFirmwareResponse.FromJson(jsonString);

namespace Ocpp._201.Generated.Models.UnpublishFirmwareResponse
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class UnpublishFirmwareResponse
    {
        [JsonProperty("customData", NullValueHandling = NullValueHandling.Ignore)]
        public virtual CustomDataType CustomData { get; set; }

        [JsonProperty("status")]
        public virtual UnpublishFirmwareStatusEnumType Status { get; set; }
    }

    /// <summary>
    /// This class does not get 'AdditionalProperties = false' in the schema generation, so it
    /// can be extended with arbitrary JSON properties to allow adding custom data.
    /// </summary>
    public partial class CustomDataType
    {
        [JsonProperty("vendorId")]
        [JsonConverter(typeof(MinMaxLengthCheckConverter))]
        public virtual string VendorId { get; set; }
    }

    /// <summary>
    /// Indicates whether the Local Controller succeeded in unpublishing the firmware.
    /// </summary>
    public enum UnpublishFirmwareStatusEnumType { DownloadOngoing, NoFirmware, Unpublished };

    public partial class UnpublishFirmwareResponse
    {
        public static UnpublishFirmwareResponse FromJson(string json) => JsonConvert.DeserializeObject<UnpublishFirmwareResponse>(json, Ocpp._201.Generated.Models.UnpublishFirmwareResponse.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UnpublishFirmwareResponse self) => JsonConvert.SerializeObject(self, Ocpp._201.Generated.Models.UnpublishFirmwareResponse.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                UnpublishFirmwareStatusEnumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MinMaxLengthCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            var value = serializer.Deserialize<string>(reader);
            if (value.Length <= 255)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type string");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (string)untypedValue;
            if (value.Length <= 255)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type string");
        }

        public static readonly MinMaxLengthCheckConverter Singleton = new MinMaxLengthCheckConverter();
    }

    internal class UnpublishFirmwareStatusEnumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(UnpublishFirmwareStatusEnumType) || t == typeof(UnpublishFirmwareStatusEnumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DownloadOngoing":
                    return UnpublishFirmwareStatusEnumType.DownloadOngoing;
                case "NoFirmware":
                    return UnpublishFirmwareStatusEnumType.NoFirmware;
                case "Unpublished":
                    return UnpublishFirmwareStatusEnumType.Unpublished;
            }
            throw new Exception("Cannot unmarshal type UnpublishFirmwareStatusEnumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (UnpublishFirmwareStatusEnumType)untypedValue;
            switch (value)
            {
                case UnpublishFirmwareStatusEnumType.DownloadOngoing:
                    serializer.Serialize(writer, "DownloadOngoing");
                    return;
                case UnpublishFirmwareStatusEnumType.NoFirmware:
                    serializer.Serialize(writer, "NoFirmware");
                    return;
                case UnpublishFirmwareStatusEnumType.Unpublished:
                    serializer.Serialize(writer, "Unpublished");
                    return;
            }
            throw new Exception("Cannot marshal type UnpublishFirmwareStatusEnumType");
        }

        public static readonly UnpublishFirmwareStatusEnumTypeConverter Singleton = new UnpublishFirmwareStatusEnumTypeConverter();
    }
}
